use IO;
use XML;
use Struct;

bundle Default {
	class WsdlTest {
		function : Main(args : String[]) ~ Nil {
			if(args->Size() > 0) {
				Run(args[0]);
			};
		}
				
		function : Run(name : String) ~ Nil {
			parser := XmlParser->New(FileReader->ReadFile(name));
			if(parser->Parse()) {
				results := parser->FindElements("/wsdl:definitions/wsdl:types");
				if(results->Size() > 0) {
					"===== TYPES ====="->PrintLine();
					types := results->Get(0)->As(XMLElement);
					elem_name := types->GetName();
					elem_name->Append("/xsd:schema/xsd:element");
					results := types->FindElements(elem_name);
					each(i : results) {	
						elem := results->Get(i)->As(XMLElement);
						type_name := elem->GetAttribute("name");
						elem_type := elem->GetChild(0)->GetChild(0);
						type_type := elem_type->GetName();
						
						Console->Print("type: name=")->Print(type_name)->Print(", ctype=")
							->PrintLine(type_type);
						
						elems := elem_type->GetChildren("xsd:element");
						each(j : elems) {	
							elem := elems->Get(j)->As(XMLElement);
							Console->Print("\tname=")->Print(elem->GetAttribute("name"))
								->Print(", type=")->PrintLine(elem->GetAttribute("type"));
						};
						"----"->PrintLine();
					};
				};
				
				"===== MESSAGES ====="->PrintLine();
				messages := parser->FindElements("/wsdl:definitions/wsdl:message");
				each(i : messages) {
					message := messages->Get(i)->As(XMLElement);
					message_name := message->GetAttribute("name");
					Console->Print("message: name=")->PrintLine(message_name);
					parts := message->GetChildren();
					each(j : parts) {
						part := parts->Get(j)->As(XMLElement);
						part_name := part->GetAttribute("name");
						part_elem := part->GetAttribute("element");
						Console->Print("\tpart: name=")->Print(part_name)->Print(", element=")
							->PrintLine(part_elem);
					};
				};
				
				results := parser->FindElements("/wsdl:definitions/wsdl:portType");
				if(results->Size() > 0) {
					"===== PORTS ====="->PrintLine();
					port := results->Get(0)->As(XMLElement);
					port_name := port->GetAttribute("name");
					Console->Print("port: name=")->PrintLine(port_name);
					operations := port->GetChildren("wsdl:operation");
					each(i : operations) {
						operation := operations->Get(i)->As(XMLElement);
						operation_name := operation->GetAttribute("name");
						Console->Print("\toperation: name=")->PrintLine(operation_name);
						ios := operation->GetChildren();
						each(j : ios) {
							io := ios->Get(j)->As(XMLElement);
							Console->Print("\t\tio: type=")->Print(io->GetName())
								->Print(", message=")->PrintLine(io->GetAttribute("message"));
						};
					};
				};
			};
		}
	}
	
	class ComplexType {
		@name : String;
		@type : String;
		@elems : Vector;
		
		New(name : String, type : String) {
			@name := name;
			@type := type;
			@elems := Vector->New();
		}
		
		method : GetName() ~ String {
			return @name;
		}
		
		method : GetType() ~ String {
			return @type;
		}
		
		method : AddElement(elem : Element) ~ Nil {
			@elems->AddBack(elem->As(Base));
		}
	}
	
	class Element {
		@name : String;
		@type : String;
		
		New(name : String, type : String) {
			@name := name;
			@type := type;
		}
		
		method : GetName() ~ String {
			return @name;
		}
		
		method : GetType() ~ String {
			return @type;
		}
	}
}

use IO;
use XML;
use Struct;

bundle Default {
	class Wsdl {
		@types : StringMap;
		@messages : StringMap;
		@ports : StringMap;
		
		function : Main(args : String[]) ~ Nil {
			if(args->Size() >= 2) {
				wsdl := Wsdl->New(args[0]);
				for(i := 1; i < args->Size(); i += 1;) {
					wsdl->Query(args[i]);
				};
			};
		}
		
		New(name : String) {
			@types := StringMap->New();
			@messages := StringMap->New();
			@ports := StringMap->New();
			Parse(name);
		}
		
		method : public : native : Query(name : String) ~ Nil {
"===== QUERY ====="->PrintLine();
			port := @ports->Find(name)->As(Port);
			if(port <> Nil) {
				message_name := port->GetInputName();
				index := message_name->Find(':');
				if(index > 0) {
					message_name := message_name->SubString(index + 1, message_name->Size() - index - 1);
					type_name := @messages->Find(message_name)->As(String);
					if(type_name <> Nil) {
						type_name := type_name->SubString(index + 1, type_name->Size() - index - 1);
						type := @types->Find(type_name)->As(Type);
						if(type <> Nil) {
							params := type->GetParameters();
							each(i : params) {
								param := params->Get(i)->As(Parameter);
param->ToString()->PrintLine();
							};
						};
					};
				};
			};
		}
		
		method : Parse(name : String) ~ Nil {
			parser := XmlParser->New(FileReader->ReadFile(name));
			if(parser->Parse()) {
				results := parser->FindElements("/wsdl:definitions/wsdl:types");
				if(results->Size() > 0) {
					"===== TYPES ====="->PrintLine();
					types := results->Get(0)->As(XmlElement);
					elem_name := types->GetName();
					elem_name->Append("/xsd:schema/xsd:element");
					results := types->FindElements(elem_name);
					each(i : results) {
						elem := results->Get(i)->As(XmlElement);
						type_name := elem->GetAttribute("name");
						elem_type := elem->GetChild(0)->GetChild(0);
						type_type := elem_type->GetName();						
Console->Print("type: name=")->Print(type_name)->Print(", ctype=")
	->PrintLine(type_type);
						type := Type->New(type_name, type_type);
						elems := elem_type->GetChildren("xsd:element");
						each(j : elems) {	
							elem := elems->Get(j)->As(XmlElement);
Console->Print("\tname=")->Print(elem->GetAttribute("name"))
	->Print(", type=")->PrintLine(elem->GetAttribute("type"));
							type->AddParameter(Parameter->New(elem->GetAttribute("name"), elem->GetAttribute("type")));
							
						};
"----"->PrintLine();
						@types->Insert(type_name, type);
					};
					
				};
				
				"===== MESSAGES ====="->PrintLine();
				results := parser->FindElements("/wsdl:definitions/wsdl:message");
				each(i : results) {
					message := results->Get(i)->As(XmlElement);
					message_name := message->GetAttribute("name");
Console->Print("message: name=")->PrintLine(message_name);
					parts := message->GetChildren();
					each(j : parts) {
						part := parts->Get(j)->As(XmlElement);
						part_name := part->GetAttribute("name");
						part_elem := part->GetAttribute("element");
Console->Print("\tpart: name=")->Print(part_name)->Print(", element=")
	->PrintLine(part_elem);
						@messages->Insert(message_name, part_elem);
					};
				};
Console->Print("message count: ")->PrintLine(@messages->Size());
				
				results := parser->FindElements("/wsdl:definitions/wsdl:portType");
				if(results->Size() > 0) {
					"===== PORTS ====="->PrintLine();
					port := results->Get(0)->As(XmlElement);
					port_name := port->GetAttribute("name");
Console->Print("port: name=")->PrintLine(port_name);
					operations := port->GetChildren("wsdl:operation");
					each(i : operations) {
						operation := operations->Get(i)->As(XmlElement);
						operation_name := operation->GetAttribute("name");
Console->Print("\toperation: name=")->PrintLine(operation_name);
						p := Port->New(operation_name);
						ios := operation->GetChildren();
						each(j : ios) {
							io := ios->Get(j)->As(XmlElement);
Console->Print("\t\tio: type=")->Print(io->GetName())
	->Print(", message=")->PrintLine(io->GetAttribute("message"));
							p->AddOperation(io->GetName(), io->GetAttribute("message"));
						};
						@ports->Insert(operation_name, p);
					};
				};
Console->Print("port count: ")->PrintLine(@ports->Size());
			};
		}
	}
	
	class Type {
		@name : String;
		@type : String;
		@parameters : Vector;
		
		New(name : String, type : String) {
			@name := name;
			@type := type;
			@parameters := Vector->New();
		}
		
		method : public : AddParameter(param : Parameter) ~ Nil {
			@parameters->AddBack(param);
		}
		
		method : public : GetParameters() ~ Vector {
			return @parameters;
		}
	}
	
	class Parameter {
		@name : String;
		@type : String;
		
		New(name : String, type : String) {
			@name := name;
			@type := type;
		}
		
		method : public : ToString() ~ String {
			buffer := String->New();
			buffer->Append("name=");
			buffer->Append(@name);
			buffer->Append(", type=");
			buffer->Append(@type);	
			return buffer;
		}
	}
	
	class Port {
		@name : String;
		@operations : StringMap;
		
		New(name : String) {
			@name := name;
			@operations := StringMap->New();
		}
		
		method : public : AddOperation(name: String, value: String) ~ Nil {
			@operations->Insert(name, value);
		}
		
		method : public : GetName() ~ String {
			return @name;
		}
		
		method : public : GetInputName() ~ String {
			return @operations->Find("wsdl:input");
		}
	}
}
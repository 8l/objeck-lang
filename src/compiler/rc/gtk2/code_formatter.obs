use Collection;

# parsing framework for Gtk2
class GtkCodeFormatter {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 2) {
			file := args[0];
			klass := args[1];
			
			parser := GtkParser->New(file);
			funcs := parser->Parse();
			"-----"->PrintLine();
			count := 0;
			each(i : funcs) {
				buffer := "";
				func := funcs->Get(i)->As(Function);
				code := FormatCode(func, klass);
				if(code->Size() > 0) {
					func_name := func->GetName();
					buffer->Append("void og_{$func_name}(VMContext& context) {\r\n");
					buffer->Append(FormatCode(func, klass));
					buffer->Append("}\r\n");
					count += 1;
					buffer->PrintLine();
				};
			};
			"total functions: {$count}"->PrintLine();			
		};
	}
	
	function : native : FormatCode(func : Function, klass : String) ~ String {
		buffer := "";	
		
		match := false;
		params := func->GetParameters();
		if(params->Size() > 0) {
			j := 0;
			param := params->Get(0)->As(FunctionParameter);
			param_type := param->GetType();
			if(param_type->GetType() = TokenType->IDENT) {				
				match := klass->Equals(param_type->GetValue());
			};
		};
		
		# process params
		if(match) {	
			func_name := func->GetName();
			param_names := Vector->New();
			each(i : params) {
				param := params->Get(i)->As(FunctionParameter);
				param_name := "param_{$i}";
				param_names->AddBack(param_name);
			
				select(param->GetTokenType()) {
					other: {
						param_type_name := param->GetValue();
						buffer->Append("\t{$param_type_name} {$param_name} = ({$param_type_name})APITools_GetIntValue(context, {$i});\r\n");
					}
		
					label TokenType->GBOOLEAN: {
						buffer->Append("\tgboolean {$param_name} = APITools_GetIntValue(context, {$i});\r\n");
					}
			
					label TokenType->GCHAR: {
						buffer->Append("\tgchar {$param_name} = APITools_GetIntValue(context, {$i});\r\n");
					}

					label TokenType->GUCHAR: {
						buffer->Append("\tguchar {$param_name} = APITools_GetIntValue(context, {$i});\r\n");
					}

					label TokenType->GINT: {
						buffer->Append("\tgint {$param_name} = APITools_GetIntValue(context, {$i});\r\n");
					}
				
					label TokenType->GUINT: {
						buffer->Append("\tguint {$param_name} APITools_GetIntValue(context, {$i});\r\n");
					}
				
					label TokenType->GSHORT: {
						buffer->Append("\tgshort {$param_name} APITools_GetIntValue(context, {$i});\r\n");
					}

					label TokenType->GUSHORT: {
						buffer->Append("\tgushort {$param_name} APITools_GetIntValue(context, {$i});\r\n");
					}

					label TokenType->GULONG: {
						buffer->Append("\tgulong {$param_name} APITools_GetIntValue(context, {$i});\r\n");
					}

					label TokenType->GLONG: {
						buffer->Append("\tglong {$param_name} APITools_GetIntValue(context, {$i});\r\n");
					}
				
					label TokenType->GINT8: {
						buffer->Append("\tgint8 {$param_name} APITools_GetIntValue(context, {$i});\r\n");
					}

					label TokenType->GUINT8: {
						buffer->Append("\tguint8 {$param_name} APITools_GetIntValue(context, {$i});\r\n");
					}
				
					label TokenType->GINT16: {
						buffer->Append("\tgint16 {$param_name} APITools_GetIntValue(context, {$i});\r\n");
					}

					label TokenType->GUINT16: {
						buffer->Append("\tguint16 {$param_name} APITools_GetIntValue(context, {$i});\r\n");
					}

					label TokenType->GINT32: {
						buffer->Append("\tgint16 {$param_name} APITools_GetIntValue(context, {$i});\r\n");
					}

					label TokenType->GUINT32: {
						buffer->Append("\tguint32 {$param_name} APITools_GetIntValue(context, {$i});\r\n");
					}

					label TokenType->GFLOAT: {
						buffer->Append("\tgfloat {$param_name} APITools_GetFloatValue(context, {$i});\r\n");
					}
			
					label TokenType->GDOUBLE: {
						buffer->Append("\tgdouble {$param_name} APITools_GetFloatValue(context, {$i});\r\n");
					}

					label TokenType->GPOINTER: {
						buffer->Append("\tgpointer {$param_name} APITools_GetIntValue(context, {$i});\r\n");
					}

					label TokenType->GCONSTPOINTER: {
						buffer->Append("\tgconstpointer {$param_name} APITools_GetIntValue(context, {$i});\r\n");
					}

					label TokenType->GSIZE: {
						buffer->Append("\tgsize {$param_name} APITools_GetIntValue(context, {$i});\r\n");
					}

					label TokenType->GSSIZE: {
						buffer->Append("\tgssize {$param_name} APITools_GetIntValue(context, {$i});\r\n");
					}
				};
			};
			# write gtk2 call		
			buffer->Append("\t{$func_name}(");
			each(i : param_names) {
				buffer->Append(param_names->Get(i)->As(String));
				if(i + 1 < param_names->Size()) {
					buffer->Append(", ");
				};
			};
			buffer->Append(");\r\n");

			return_token := func->GetReturn();
			if(return_token->GetType() <> TokenType->VOID) {
				buffer->Append("\t// handle return type\r\n");
			};
		};
		
		return buffer;
	}
}

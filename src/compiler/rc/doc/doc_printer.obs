use System.IO.File;
use Collection;

class DocPrinter {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			parser := DocParser->New(args[0]);
			if(<>parser->Parse()) {
				"--- failed ---"->PrintLine();
				return;
			};

			bundles := parser->GetBundles();

			# bundles
			bundle_keys := bundles->GetKeys();
			each(i : bundle_keys) {
				bundle_block := bundles->Find(bundle_keys->Get(i)->As(String))->As(BundleBlock);
				IO.Console->Print("bundle='")->Print(bundle_block->GetName())->PrintLine("'");
	
				"--- CLASSES ---"->PrintLine();
				classes := bundle_block->GetClasses();
				class_keys := classes->GetKeys();
				each(j : class_keys) {
					class_block := classes->Find(class_keys->Get(j)->As(String))->As(ClassBlock);
					if(class_block <> Nil) {
						PrintClassInterface(class_block, j);
					};
				};

				"--- INTERFACES ---"->PrintLine();
				interfaces := bundle_block->GetInterfaces();
				inf_keys := interfaces->GetKeys();
				each(j : inf_keys) {
					inf_block := interfaces->Find(inf_keys->Get(j)->As(String))->As(ClassBlock);
					if(inf_block <> Nil) {
						PrintClassInterface(inf_block, j);
					};
				};

				"--- ENUMS ---"->PrintLine();
				enums := bundle_block->GetEnums();
				enum_keys := enums->GetKeys();
				each(j : enum_keys) {
					enum_block := enums->Find(enum_keys->Get(j)->As(String))->As(EnumBlock);
					if(enum_block <> Nil) {
						PrintEnum(enum_block, j);
					};
				};
			
#~
			classes := parser->GetAllClasses();
			if(classes <> Nil) {
				"---"->PrintLine();
				classes->Size()->PrintLine();
				"---"->PrintLine();
				each(i : classes) {
					class_block := classes->Get(i)->As(ClassBlock);
					PrintClassInterface(class_block, i);
				};				
			};

			interfaces := parser->GetAllInterfaces();
			if(interfaces <> Nil) {
				"---"->PrintLine();
				interfaces->Size()->PrintLine();
				"---"->PrintLine();
				each(i : interfaces) {
					inf_block := interfaces->Get(i)->As(ClassBlock);
					PrintClassInterface(inf_block, i);
				};				
			};

			enums := parser->GetAllEnums();
			if(enums <> Nil) {
				"---"->PrintLine();
				enums->Size()->PrintLine();
				"---"->PrintLine();
				each(i : enums) {
					enum_block := enums->Get(i)->As(EnumBlock);
					PrintEnum(enum_block, i);
				};
~#

			};

		};
	}

	function : PrintClassInterface(class_block : ClassBlock, i : Int) ~ Nil {
		class_name := class_block->GetName();
		class_desc := class_block->GetDesc();

		if(class_block->IsInterface()) {
			"interface ["->Print();
		}
		else {
			"class ["->Print();
		};
		IO.Console->Print(i + 1)->Print("]: name='")
			->Print(class_name <> Nil & class_name->Size() > 0 ? class_name : "(none)")->Print("', desc='")
			->Print(class_desc <> Nil & class_desc->Size() > 0 ? class_desc : "(none)")->PrintLine("'");
		func_names := class_block->GetFunctionNames();
		each(j : func_names) {
			short_name := func_names->Get(j)->As(String);
			funcs := class_block->GetFunctions(short_name);
			each(k : funcs) {
				func := funcs->Get(k)->As(FuncBlock);								
				if(func <> Nil) {
					IO.Console->Print("  func: name='")->Print(func->GetName())->Print("', desc='")
						->Print(func->GetDesc())->Print("')");
					if(func->GetReturnTag() <> Nil) {
						IO.Console->Print(", return: type='")->Print(func->GetReturnType()->GetTypeName())
							->Print("'")->Print("', desc='")->Print(func->GetReturnTag()->GetDesc())->Print("'");
					};

					IO.Console->Print(", signature='")->Print(func->GetSignature())->PrintLine("'");
					param_tags := func->GetParamTags();
					params := func->GetParams();
					each(l : params) {
						param := params->Get(l)->As(DocType);
						param_tag := param_tags->Find(param->GetName())->As(DocTag);
						if(param_tag <> Nil) {
							IO.Console->Print("    param (")->Print(l + 1)->Print("): name='")
								->Print(param_tag->GetName())->Print("', type='")->Print(param->GetTypeName())
								->Print("', desc='")->Print(param_tag->GetDesc())->PrintLine("'");
						};
					};
				};
			};
		};
	}
	
	function : PrintEnum(enum_block : EnumBlock, i : Int) ~ Nil {
		enum_name := enum_block->GetName();
		enum_desc := enum_block->GetDesc();
		IO.Console->Print("enum [")->Print(i + 1)->Print("]: name='")
			->Print(enum_name <> Nil & enum_name->Size() > 0 ? enum_name : "(none)")->Print("', desc='")
			->Print(enum_desc <> Nil & enum_desc->Size() > 0 ? enum_desc : "(none)")->PrintLine("'");
		items := enum_block->GetItems();
		each(j : items) {
			item := items->Get(j)->As(String);
			IO.Console->Print("  item (")->Print(j + 1)->Print("): name='")->Print(item)->PrintLine("'");
		};
	}
}

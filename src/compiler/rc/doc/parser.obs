use System.IO;
use System.IO.File;
use Collection;

class DocParser {
	@file : String;
	
	New(file : String) {
		@file := file;	
	}
	
	method : public : native : Parse() ~ Vector {
		capture := 0;
		block := "";
		line_num := 0;
		comment_state := 0;							
		reader := FileReader->New(@file);
		classes := Vector->New();
		
		class_doc : ClassBlock;
		while(<>reader->IsEOF()) {
			line := reader->ReadString();
			line_num += 1;
			
			i := 0;	
			while(i < line->Size()) {		
				# skip whitespace
				while((line->Get(i) = ' ' | line->Get(i) = '\t') & i < line->Size()) {
					i += 1;
				};
				
				# parse the line
				if(i < line->Size()) {
					# word
					if(line->Get(i)->IsChar() = true) {
						string := "";
						while(line->Get(i)->IsChar() = true | line->Get(i) = '.') {
							string->Append(line->Get(i));
							i += 1;
						};
						
						if(capture = 2 & string->Equals("class")) {
							capture := 3;
						}
						else if(capture = 2 & (string->Equals("function") | string->Equals("method"))) {
							capture := 4;
						};						
					}
					# other
					else {
						select(line->Get(i)) {
							label '{': {
								if(capture = 3) {
									block->Append(line);
									block->Append('\n');
									class_doc := ClassBlock->New(block);
									if(class_doc <> Nil) {
										classes->AddBack(class_doc);
									};								
									block := "";
								}
								else if(capture = 4) {
									block->Append(line);
									block->Append('\n');
									if(class_doc <> Nil) {
										class_doc->AddFunction(block);
										block := "";
									};
								};
								capture := 0;
								comment_state := 0;
							}
			
							label '#': {
								if(comment_state = 2) {
									capture := 2;
									comment_state := 0;
								}
								else if(comment_state = 0) {
									comment_state := 1;
								};
							}

							label '~': {
								if(comment_state = 1) {
									capture := 1;
									comment_state := 0;
								}
								else if(comment_state = 0) {
									comment_state := 2;
								};
							}
					
							other: {
								comment_state := 0;
							}
						};						
					};	
				};
				i += 1;
			};				
			
			if(capture > 0) {
				block->Append(line);
				block->Append('\n');
			};
		};
		
		leaving {
			if(reader <> Nil) {
				reader->Close();
			};
		};
		
		return classes;
	}
}

class DocBlock {
	@buffer : String;
	@buffer_index : Int;
	@cur_char : Char;
	@nxt_char : Char;
	@parsed : Bool;
	
	New(buffer : String) {
		@buffer := buffer;
		@buffer_index := 0;
		@parsed := false;
		NextChar();
	}
	
	method : NextChar() ~ Nil {
		if(@buffer_index < @buffer->Size()) {
			@cur_char := @buffer->Get(@buffer_index);
			@buffer_index += 1;
			if(@buffer_index < @buffer->Size()) {
				@nxt_char := @buffer->Get(@buffer_index);
			}
			else {
				@nxt_char := '\0';
			};
		}
		else {
			@cur_char := '\0';
			@nxt_char := '\0';
		};
	}
	
	method : ParseWhiteSpace() ~ Nil {
		while(@buffer_index < @buffer->Size() & (@cur_char = ' ' | @cur_char = '\t' | 
			@cur_char = '\r' | @cur_char = '\n')) {
			NextChar();
		};
	}

	method : MatchCommentStart() ~ Bool {
		ParseWhiteSpace();
		match := @cur_char = '#' & @nxt_char = '~';
		if(match) {
			NextChar();	NextChar();
			return true;
		};
		
		return false;
	}

	method : MatchCommentEnd() ~ Bool {
		ParseWhiteSpace();
		match := @cur_char = '~' & @nxt_char = '#';
		if(match) {
			NextChar();	NextChar();
			return true;
		};
		
		return false;
	}
	
	method : MatchChar(char : Char) ~ Bool {
		ParseWhiteSpace();
		
		match := @cur_char = char;
		if(match) {
			NextChar();
			return true;
		};
		
		return false;
	}

	method : MatchIdent(ident : String) ~ Bool {
		return ParseIdent()->Equals(ident);
	}

	method : ParseIdent() ~ String {
		ParseWhiteSpace();

		ident := "";
		done := false;
		while(<>done) {
			select(@cur_char) {
				label ' ':
				label '\r':
				label '\n':
				label '{':
				label ':':
				label ',':
				label '(':
				label ')':
				label '~':
				label '#':
				label '\0': {
					done := true;
				}				
				other: {
					ident->Append(@cur_char);
					NextChar();
				}
			};
		};
		
		return ident->Trim();
	}
	
	method : ParseDesc() ~ String {
		ParseWhiteSpace();
		
		ident := "";
		done := false;
		while(<>done) {
			select(@cur_char) {
				label ' ':
				label '\t':
				label '\r':
				label '\n': {
					ParseWhiteSpace();
					ident->Append(' ');
				}
#~
				label '#': {
					ident->Append(' ');
					NextChar();
				}
~#
				label '{':
				label ':':
				label '(':
				label ')':
				label '~':
				label '@':
				label '\0': {
					done := true;
				}				
				other: {
					ident->Append(@cur_char);
					NextChar();
				}
			};
		};
		
		return ident->Trim();
	}

	method : WasParsed() ~ Bool {
		return @parsed;
	}
}

class ClassBlock from DocBlock {
	@name : String;
	@funcs : StringMap;
	
	New(buffer : String) {
		Parent(buffer);
		@funcs := StringMap->New();
		@parsed := Parse();
	}

	method : public : GetName() ~ String {
		return @name;
	}

	method : public : AddFunction(block : String) ~ Nil {
		func := FuncBlock->New(block);
		if(func->WasParsed()) {
			@funcs->Insert(func->GetName(), func);
		};
	}

	method : public : GetFunctions() ~ StringMap {
		return @funcs;
	}

	method : native : Parse() ~ Bool {
		if(<>MatchCommentStart()) {
			return false;
		};
		desc := ParseDesc();
		if(<>MatchCommentEnd()) {
			return false;
		};

		if(<>MatchIdent("class")) {
			return false;
		};

		@name := ParseIdent();
		if(@name->Size() > 0) {
			return true;
		};
		
		return false;
	}
}

class FuncBlock from DocBlock {
	@name : String;
	@desc : String;
	@tags : StringHash;
	@return_type : DocType;
	@func_types : Vector;
	@is_func : Bool;
	@is_private : Bool;
	@is_native : Bool;
	@types : StringHash;
	
	New(buffer : String) {
		Parent(buffer);
		@name := "";
		@desc := "";
		@tags := StringHash->New();
		@func_types := Vector->New();
		
		@types := StringHash->New();
		value : Int := DocType->Type->INT;
		@types->Insert("Byte", IntHolder->New(value));
		
		@parsed := Parse();
	}
	
	method : public : GetName() ~ String {
		return @name;
	}

	method : public : GetDesc() ~ String {
		return @desc;
	}

	method : public : GetReturn() ~ DocType {
		return @return_type;
	}

	method : public : GetParamTags() ~ StringHash {
		return @tags;
	}
	
	method : public : GetParams() ~ Vector {
		return @func_types;
	}
	
	method : native : Parse() ~ Bool {
		if(<>MatchCommentStart()) {
			return false;
		};
		@desc := ParseDesc();	

		# parse tags		
		are_tags := true;
		while(@cur_char <> '\0' & are_tags) {
			type := ParseIdent();
			if(type->Size() > 0) {
				if(type->Equals("@param")) {
					tag_name := ParseIdent();
					if(tag_name->Size() = 0) {
						return false;
					};

					tag_desc := ParseDesc();
					if(tag_desc->Size() = 0) {
						return false;
					};
					tag := DocTag->New(tag_name, tag_desc);
					@tags->Insert(tag->GetName(), tag);
				}
				else if(type->Equals("@return")) {
					tag_desc := ParseDesc();
					if(tag_desc->Size() = 0) {
						return false;
					};
					tag := DocTag->New(tag_desc);
				}
				else {
					return false;
				};
			}
			else {
				are_tags := false;
			};
		};

		if(<>MatchCommentEnd()) {
			return false;
		};
		
		# parse function
		type := ParseIdent();
		if(type->Size() > 0) {
			if(type->Equals("function")) {
				@is_fun := true;
			}
			else if(type->Equals("method")) {
				@is_fun := false;
			}
			else {
				return false;
			};
		};

		while(MatchChar(':')) {
			meta := ParseIdent();
			if(meta->Size() > 0) {
				if(meta->Equals("public")) {
					@is_public := true;
				}
				else if(meta->Equals("private")) {
					@is_public := false;
				}
				else if(meta->Equals("native")) {
					@is_native := true;
				}
				else {
					@name := meta;
				};
			};
		};
		
		if(@name = Nil | <>MatchChar('(')) {
			return false;
		};
		
		# function parameters
		while(@cur_char <> ')') {
			param_name := ParseIdent();
			if(param_name->Size() = 0) {
				return false;
			};
		
			if(<>MatchChar(':')) {
				return false;
			};
		
			type_name := "";
			type_param := ParseType(param_name, type_name);
			if(type_param <> Nil) {
				@func_types->AddBack(type_param);
				MatchChar(',');
			};
		};
		
		if(<>MatchChar(')')) {
			return false;
		};

		if(<>MatchChar('~')) {
			return false;
		};

		# return type
		rtrn_name := ParseIdent();
		if(rtrn_name->Size() = 0) {
			return false;
		};
			
		# TODO: make this a hash
		@types->Insert("Int", IntHolder->New(DocType->Type->INT->As(Int)));
		
		if(rtrn_name->Equals("Int")) {
			@return_type := DocType->New("", rtrn_name, DocType->Type->INT);
		}
		else if(rtrn_name->Equals("Float")) {
			@return_type := DocType->New("", rtrn_name, DocType->Type->FLOAT);
		}
		else if(rtrn_name->Equals("Nil")) {
			@return_type := DocType->New("", rtrn_name, DocType->Type->NIL);
		}
		else {
			@return_type := DocType->New("", rtrn_name, DocType->Type->CLASS);
		}; 		

		return true;
	}
	
	method : ParseType(param_name : String, type_name : String) ~ DocType {
		if(MatchChar('(')) {
			type_name->Append('(');

			if(ParseFuncType(type_name)) {
				return DocType->New(param_name, type_name, DocType->Type->FUNC);
			}
			else {
				return Nil;
			};
		}
		else {
			ident := ParseIdent();
			if(ident->Size() = 0) {
				return Nil;
			};
			type_name->Append(ident);
		
			# TODO: make this a hash	
			if(type_name->Equals("Int")) {
				return DocType->New(param_name, type_name, DocType->Type->INT);
			}
			else if(type_name->Equals("Float")) {
				return DocType->New(param_name, type_name, DocType->Type->FLOAT);
			}
			else {
				return DocType->New(param_name, type_name, DocType->Type->CLASS);
			};
		};
	}
	
	method : ParseFuncType(type_name : String) ~ Bool {
		ident := ParseIdent();
		while(ident->Size() > 0) {
			type_name->Append(ident);
			if(MatchChar(',')) {
				type_name->Append(',');
			};
			ident := ParseIdent();
		};

		if(<>MatchChar(')')) {
			return false;
		};
		type_name->Append(')');

		if(<>MatchChar('~')) {
			return false;
		};
		type_name->Append('~');

		ident := ParseIdent();
		if(ident->Size() = 0) {
			return false;
		};
		type_name->Append(ident);
		
		return true;
	}
}

class DocTag {
	enum Type {
		PARAM,
		RETURN
	}	
	
	@type : Type;
	@name : String;
	@desc : String;

	New(name : String, desc : String) {
		@type := Type->PARAM;
		@name := name;
		@desc := desc;
	}

	New(desc : String) {
		@type := Type->RETURN;
		@name := "";
		@desc := desc;
	}
	
	method : public : GetType() ~ DocTag->Type {
		return @type;
	}

	method : public : GetName() ~ String {
		return @name;
	}

	method : public : GetDesc() ~ String {
		return @desc;
	}
}

class DocType {
	enum Type {
		BYTE,
		CHAR,
		INT,
		FLOAT,
		CLASS,
		FUNC,
		NIL
	}
	
	@name : String;
	@type_name : String;		
	@type : DocType->Type;
	
	New(name : String, type_name : String, type : Type) {
		@name := name;
		@type_name := type_name;
		@type := type;
	}

	method : public : GetName() ~ String {
		return @name;
	}

	method : public : GetTypeName() ~ String {
		return @type_name;
	}

	method : public : GetType() ~ Type {
		return @type;
	}
}


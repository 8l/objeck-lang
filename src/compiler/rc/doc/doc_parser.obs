#~
Objeck HTML code documentation system
Copyright (c) 2014 Randy Hollines
~#

use System.IO;
use System.IO.File;
use Collection;

class DocParser {
	@buffer : String;
	@buffer_index : Int;
	@cur_char : Char;
	@nxt_char : Char;
	@file : String;
	@bundles : StringHash;
	@class_inf_block : ClassBlock;
	@level : Int;
	@class_level : Int;
	@bundle_block : BundleBlock;
	
	New(file : String) {
		@file := file;	
		@bundles := StringHash->New();
		@level := 0;
	}
	
	method : public : GetAllClasses() ~ Vector {
		all_classes := Vector->New();
		
		bundle_keys := @bundles->GetKeys();
		each(i : bundle_keys) {
			bundle_block := @bundles->Find(bundle_keys->Get(i)->As(String))->As(BundleBlock);
			classes := bundle_block->GetClasses();
			class_keys := classes->GetKeys();
			each(j : class_keys) {
				klass := classes->Find(class_keys->Get(j)->As(String))->As(ClassBlock);
				if(klass <> Nil) {
					all_classes->AddBack(klass);
				};
			};
		};
				
		return all_classes;
	}

	method : public : GetAllInterfaces() ~ Vector {
		all_interfaces := Vector->New();
		
		bundle_keys := @bundles->GetKeys();
		each(i : bundle_keys) {
			bundle_block := @bundles->Find(bundle_keys->Get(i)->As(String))->As(BundleBlock);
			interfaces := bundle_block->GetInterfaces();
			inf_keys := interfaces->GetKeys();
			each(j : inf_keys) {
				inf := interfaces->Find(inf_keys->Get(j)->As(String))->As(ClassBlock);
				if(inf <> Nil) {
					all_interfaces->AddBack(inf);
				};
			};
		};
				
		return all_interfaces;
	}

	method : public : GetAllEnums() ~ Vector {
		all_enums := Vector->New();
		
		bundle_keys := @bundles->GetKeys();
		each(i : bundle_keys) {
			bundle_block := @bundles->Find(bundle_keys->Get(i)->As(String))->As(BundleBlock);
			enums := bundle_block->GetEnums();
			enum_keys := enums->GetKeys();
			each(j : enum_keys) {
				eenum := enums->Find(enum_keys->Get(j)->As(String))->As(EnumBlock);
				if(eenum <> Nil) {
					all_enums->AddBack(eenum);
				};
			};
		};
				
		return all_enums;
	}

	method : NextChar() ~ Nil {
		if(@buffer_index < @buffer->Size()) {
			@cur_char := @buffer->Get(@buffer_index);
			@buffer_index += 1;
			if(@buffer_index < @buffer->Size()) {
				@nxt_char := @buffer->Get(@buffer_index);
			}
			else {
				@nxt_char := '\0';
			};
		}
		else {
			@cur_char := '\0';
			@nxt_char := '\0';
		};
	}

	method : ParseWhiteSpace() ~ Nil {
		while(@buffer_index < @buffer->Size() & (@cur_char = ' ' | @cur_char = '\t' | @cur_char = '\r' | @cur_char = '\n')) {
			NextChar();
		};
	}

	method : ParseIdent() ~ String {
		ParseWhiteSpace();

		ident := "";
		done := false;
		while(<>done) {
			select(@cur_char) {
				label ' ':
				label '\r':
				label '\n':
				label '{':
				label '}':
				label ':':
				label ',':
				label '(':
				label ')':
				label '~':
				label '#':
				label '\0': {
					done := true;
				}				
				other: {
					ident->Append(@cur_char);
					NextChar();
				}
			};
		};
		
		return ident->Trim();
	}
	
	method : public : native : ParseBundle(block : String) ~ Nil {
		block->Append(" bundle ");
		while(@cur_char <> '\0' & @cur_char <> '{' & @cur_char <> ';') {
			block->Append(@cur_char);
			NextChar();
		};
		block->Append(" {");

		bundle_block := BundleBlock->New(block);
		if(bundle_block->IsParsed()) {
			SetBundle(bundle_block);
			@bundles->Insert(@bundle_block->GetName(), @bundle_block);
		};
	}

	method : public : native : ParseEnum(block : String, level : Int) ~ Nil {
		block->Append(" enum ");
		while(@cur_char <> '\0' & @cur_char <> '}') {
			block->Append(@cur_char);
			CheckLevel();
			NextChar();
		};
		block->Append(" }");					
		
		enum_block := EnumBlock->New(block);
		if(enum_block->IsParsed()) {
			# TODO: look at levels
			@bundle_block->AddEnum(enum_block);
		};
		
# IO.Console->Print("enum: block='")->Print(block)->PrintLine("'");
# "---"->PrintLine();

		block := "";
	}

	method : public : native : ParseClassFunction(name : String, block : String, level : Int) ~ Nil {
		block->Append(' ');
		block->Append(name);
		block->Append(' ');
		while(@cur_char <> '\0' & @cur_char <> '{' & @cur_char <> ';') {
			block->Append(@cur_char);
			NextChar();
		};
		block->Append(" {");

		if(name->Equals("class")) {
			@class_inf_block := ClassBlock->New(block, false);
			if(@class_inf_block->IsParsed()) {
				# TODO: look at levels
				@bundle_block->AddClass(@class_inf_block);
			};
		}
		else if(name->Equals("interface")) {
			@class_inf_block := ClassBlock->New(block, true);
			if(@class_inf_block->IsParsed()) {
				# TODO: look at levels
				@bundle_block->AddInterface(@class_inf_block);
			};
		}
		else if(@class_inf_block <> Nil & @class_inf_block->IsParsed()) {
			@class_inf_block->AddFunction(block);
		};

# IO.Console->Print(name)->Print(": block='")->Print(block)->PrintLine("'");
# "---"->PrintLine();
		block := "";
	}

	method : CheckLevel() ~ Nil {
		if(@cur_char = '{') {
			@level += 1;
		}
		else if(@cur_char = '}') {
			@level -= 1;
			if(@level = 0) {
				@bundle_block := @bundles->Find("Default")->As(BundleBlock);
			};
		};
	}

	method : SetBundle(bundle_block : BundleBlock) ~ Nil {
		found := @bundles->Find(bundle_block->GetName())->As(BundleBlock);
		if(found <> Nil) {
			@bundle_block := found;
		}
		else {
			@bundles->Insert(bundle_block->GetName(), bundle_block);
			@bundle_block := bundle_block;
		};
	}
	
	method : public : native : Parse() ~ Bool {
		if(<>@file->EndsWith(".obs")) {
			return false;
		};
		
		@buffer := FileReader->ReadFile(@file);
		if(@buffer = Nil) {
			return false;
		};		

		state := 0;
		start := 0;
		bundle_block := BundleBlock->New();
		bundle_block->SetName("Default");
		SetBundle(bundle_block);

		block := "";
		NextChar();
		ParseWhiteSpace();
		while(@cur_char <> '\0') {
			# states 1-3 for outer classes and enums
			if(state = 2) {
				ident := ParseIdent();
				if(ident->Equals("bundle")) {
					ParseBundle(block);				
				}
				else if(ident->Equals("class") | ident->Equals("interface")) {
					ParseClassFunction(ident, block, @level);
				}
				else if(ident->Equals("enum")) {
					ParseEnum(block, @level);
				}
				else if(ident->Equals("function") | ident->Equals("method") | ident->Equals("New")) {
					ParseClassFunction(ident, block, @level);
				};
				state := 0;
			};
			
			if(@cur_char = '#' & @nxt_char = '~') {
				state := 1;
				start := @buffer_index - 1;
			}
			else if(state = 1 & @cur_char = '~' & @nxt_char = '#') {
				block := @buffer->SubString(start, @buffer_index - start + 1);
				state := 2;
				NextChar();
			}
			# uncommented 'bundle' tag
			else if(@cur_char = 'b' & @nxt_char = 'u') {
				ident := ParseIdent();
				if(ident->Equals("bundle")) {
					@bundle_name := ParseIdent();
# IO.Console->Print("bundle: name=")->Print(@bundle_name)->Print(", level=")->PrintLine(@level);
					if(@bundle_name->Size() > 0) {
						bundle_block := BundleBlock->New();
						bundle_block->SetName(@bundle_name);
						SetBundle(bundle_block);
					};
				};
			};
			CheckLevel();
			
			NextChar();
		};

@bundles->Size()->PrintLine();

		return true;	
	}
}

class DocBlock {
	@buffer : String;
	@buffer_index : Int;
	@cur_char : Char;
	@nxt_char : Char;
	@parsed : Bool;
	
	New(buffer : String) {
		@buffer := buffer;
		@buffer_index := 0;
		@parsed := false;
		NextChar();
	}
	
	method : NextChar() ~ Nil {
		if(@buffer_index < @buffer->Size()) {
			@cur_char := @buffer->Get(@buffer_index);
			@buffer_index += 1;
			if(@buffer_index < @buffer->Size()) {
				@nxt_char := @buffer->Get(@buffer_index);
			}
			else {
				@nxt_char := '\0';
			};
		}
		else {
			@cur_char := '\0';
			@nxt_char := '\0';
		};
	}
	
	method : ParseWhiteSpace() ~ Nil {
		while(@buffer_index < @buffer->Size() & (@cur_char = ' ' | @cur_char = '\t' | 
			@cur_char = '\r' | @cur_char = '\n')) {
			NextChar();
		};
	}

	method : MatchCommentStart() ~ Bool {
		ParseWhiteSpace();
		match := @cur_char = '#' & @nxt_char = '~';
		if(match) {
			NextChar();	NextChar();
			return true;
		};
		
		return false;
	}

	method : MatchCommentEnd() ~ Bool {
		ParseWhiteSpace();
		match := @cur_char = '~' & @nxt_char = '#';
		if(match) {
			NextChar();	NextChar();
			return true;
		};
		
		return false;
	}
	
	method : MatchChar(char : Char) ~ Bool {
		ParseWhiteSpace();
		
		match := @cur_char = char;
		if(match) {
			NextChar();
			return true;
		};
		
		return false;
	}

	method : MatchIdent(ident : String) ~ Bool {
		return ParseIdent()->Equals(ident);
	}

	method : MatchEitherIdent(checks : String[]) ~ Bool {
		ident := ParseIdent();
		each(i : checks) {
			if(checks[i]->Equals(ident)) {
				return true;
			};
		};
		
		return false;
	}

	method : ParseIdent() ~ String {
		ParseWhiteSpace();

		ident := "";
		done := false;
		while(<>done) {
			select(@cur_char) {
				label ' ':
				label '\r':
				label '\n':
				label '{':
				label '}':
				label ':':
				label ',':
				label '(':
				label ')':
				label '~':
				label '#':
				label '\0': {
					done := true;
				}
				
				other: {
					ident->Append(@cur_char);
					NextChar();
				}
			};
		};
		
		return ident->Trim();
	}
	
	method : ParseDesc() ~ String {
		ParseWhiteSpace();
		
		ident := "";
		done := false;
		while(<>done) {
			select(@cur_char) {
				label ' ':
				label '\t':
				label '\r':
				label '\n': {
					ParseWhiteSpace();
					ident->Append(' ');
				}
				label '{':
				label '}':
				label ':':
				label '(':
				label ')':
				label '~':
				label '@':
				label '\0': {
					done := true;
				}				
				other: {
					ident->Append(@cur_char);
					NextChar();
				}
			};
		};
		
		return ident->Trim();
	}

	method : public : virtual : IsParsed() ~ Bool;

	method : virtual : Parse() ~ Bool;
}

class BundleBlock from DocBlock {
	@name : String;
	@parsed : Bool;
	@classes : StringHash;
	@interfaces : StringHash;
	@enums : StringHash;

	New() {
		Parent("");
		@classes := StringHash->New();
		@interfaces := StringHash->New();
		@enums := StringHash->New();
	}

	New(buffer : String) {
		Parent(buffer);
		@parsed := Parse();
	}
	
	method : public : IsParsed() ~ Bool {
		return @parsed;
	}

	method : public : GetName() ~ String {
		return @name;
	}

	method : public : SetName(name : String) ~ Nil {
		@name := name;
		@parsed := true;
	}

	method: public : AddClass(class_block : ClassBlock) ~ Nil {
		@classes->Insert(class_block->GetName(), class_block);
	}

	method: public : GetClasses() ~ StringHash {
		return @classes;
	}

	method: public : AddEnum(enum_block : EnumBlock) ~ Nil {
		@enums->Insert(enum_block->GetName(), enum_block);
	}

	method: public : GetEnums() ~ StringHash {
		return @enums;
	}

	method: public : AddInterface(inf_block : ClassBlock) ~ Nil {
		@interfaces->Insert(inf_block->GetName(), inf_block);
	}

	method: public : GetInterfaces() ~ StringHash {
		return @interfaces;
	}

	method : native : Parse() ~ Bool {
		if(<>MatchCommentStart()) {
			return false;
		};
		@desc := ParseDesc();	

		# parse tags		
		type := ParseIdent();
		if(type->Size() > 0) {
			if(type->Equals("@class")) {
				@klass := ParseIdent();
				if(@klass->Size() = 0) {
					return false;
				};
			};
		};
		

		if(<>MatchCommentEnd()) {
			return false;
		};

		if(<>MatchIdent("bundle")) {
			return false;
		};

		@name := ParseIdent();
		if(@name->Size() > 0) {
			return true;
		};

		return false;
	}
}

class EnumBlock from DocBlock {
	@name : String;
	@desc : String;
	@klass : String;
	@items : Vector;
	@parsed : Bool;
	
	New(buffer : String) {
		Parent(buffer);
		@items := Vector->New();
		@parsed := Parse();
	}

	method : public : IsParsed() ~ Bool {
		return @parsed;
	}

	method : public : GetName() ~ String {
		return @name;
	}

	method : public : GetClass() ~ String {
		return @klass;
	}

	method : public : GetItems() ~ Vector {
		return @items;
	}

	method : public : GetDesc() ~ String {
		return @desc;
	}

	method : native : Parse() ~ Bool {
		if(<>MatchCommentStart()) {
			return false;
		};
		@desc := ParseDesc();	

		# parse tags		
		type := ParseIdent();
		if(type->Size() > 0) {
			if(type->Equals("@class")) {
				@klass := ParseIdent();
				if(@klass->Size() = 0) {
					return false;
				};
			};
		};
		

		if(<>MatchCommentEnd()) {
			return false;
		};

		if(<>MatchIdent("enum")) {
			return false;
		};

		@name := ParseIdent();
		if(@name->Size() = 0) {
			return false;
		};

		if(@klass <> Nil) {
			name := @klass;
			name += "->";
			name += @name;
			@name := name;
		};

		if(<>MatchChar('{')) {
			return false;
		};
	
		# items
		while(@cur_char <> '}') {
			item_name := ParseIdent();
			if(item_name->Size() = 0) {
				return false;
			};

			@items->AddBack(item_name);
			MatchChar(',');
		};
		
		return true;
	}
}

class ClassBlock from DocBlock {
	@name : String;
	@from : String;
	@desc : String;
	@funcs : StringMap;
	@is_inf : Bool;
	@parsed : Bool;
	
	New(buffer : String, is_inf : Bool) {
		Parent(buffer);
		@is_inf := is_inf;
		@funcs := StringMap->New();
		@parsed := Parse();
	}

	method : public : IsParsed() ~ Bool {
		return @parsed;
	}

	method : public : IsInterface() ~ Bool {
		return @is_inf;
	}
	
	method : public : GetName() ~ String {
		return @name;
	}

	method : public : GetFrom() ~ String {
		return @from;
	}

	method : public : GetDesc() ~ String {
		return @desc;
	}

	method : public : AddEnum(block : String) ~ Nil {
	}

	method : public : AddFunction(block : String) ~ Nil {
		func := FuncBlock->New(block);
		if(func->IsParsed()) {
			funcs := @funcs->Find(func->GetName())->As(Vector);
			if(funcs = Nil) {
				funcs := Vector->New();
				@funcs->Insert(func->GetName(), funcs);
			};
			funcs->AddBack(func);
		};
	}

	method : public : GetFunction(name : String) ~ Vector {
		return @funcs->Find(name)->As(Vector);
	}

	method : public : GetFunctionNames() ~ Vector {
		return @funcs->GetKeys();
	}

	method : public : GetFunctions(name : String) ~ Vector {
		return @funcs->Find(name)->As(Vector);
	}
	
	method : public : GetAllFunctions() ~ Vector {
		all_funcs := Vector->New();
		
		keys := @funcs->GetKeys();
		each(i : keys) {
			funcs := @funcs->Find(keys->Get(i)->As(String))->As(Vector);
			each(j : funcs) {
				all_funcs->AddBack(funcs->Get(j));
			};
		};
				
		return all_funcs;
	}

	method : native : Parse() ~ Bool {
		if(<>MatchCommentStart()) {
			return false;
		};
		@desc := ParseDesc();
		if(<>MatchCommentEnd()) {
			return false;
		};

		if(<>MatchEitherIdent(["class", "interface"])) {
			return false;
		};
		
		@name := ParseIdent();
		if(@name->Size() = 0) {
			return false;
		};

		if(MatchIdent("from")) {
			@from := ParseIdent();
			if(@from->Size() = 0) {
				return false;
			};
		};

		# TODO: interfaces
		if(MatchIdent("interface")) {

		};
		
		return true;
	}
}

class FuncBlock from DocBlock {
	@name : String;
	@signature : String;
	@desc : String;
	@tags : StringHash;
	@return_type : DocType;
	@return_tag : DocTag;
	@func_types : Vector;
	@is_func : Bool;
	@is_private : Bool;
	@is_native : Bool;
	@is_virtual : Bool;
	@is_new : Bool;
	@types : static : StringHash;
	@parsed : Bool;
	
	New(buffer : String) {
		Parent(buffer);
		Initialize();
		
		@name := "";
		@desc := "";
		@tags := StringHash->New();
		@func_types := Vector->New();
		@parsed := Parse();
	}
	
	function : Initialize() ~ Nil {
		if(@types = Nil) {
			@types := StringHash->New();
			@types->Insert("Byte", IntHolder->New(DocType->Type->BYTE->As(Int)));
			@types->Insert("Char", IntHolder->New(DocType->Type->CHAR->As(Int)));
			@types->Insert("Int", IntHolder->New(DocType->Type->INT->As(Int)));
			@types->Insert("Float", IntHolder->New(DocType->Type->FLOAT->As(Int)));
			@types->Insert("Nil", IntHolder->New(DocType->Type->NIL->As(Int)));
		};
	}
	
	method : public : IsParsed() ~ Bool {
		return @parsed;
	}

	method : public : GetName() ~ String {
		return @name;
	}

	method : public : GetSignature() ~ String {
		if(@signature = Nil) {
			@signature := "";
			
			if(@is_new) {
				@signature->Append("New");
			}
			else {
				if(@is_func) {
					@signature->Append("function : ");
				}
				else {
					@signature->Append("method : ");
				};
				
				if(@is_private) {
					@signature->Append("private : ");
				}
				else {
					@signature->Append("public : ");
				};
		
				if(@is_native) {
					@signature->Append("native : ");
				};
				
				if(@is_virtual) {
					@signature->Append("virutal : ");
				};
		
				@signature->Append(@name);
			};
			@signature->Append('(');

			each(i : @func_types) {
				func_type := @func_types->Get(i)->As(DocType);
				@signature->Append(func_type->GetName());
				@signature->Append(':');
				@signature->Append(func_type->GetTypeName());
			
				if(i + 1 < @func_types->Size()) {
					@signature->Append(", ");
				};
			};
		
			if(@is_new) {
				@signature->Append(')');
			}
			else {
				@signature->Append(") ~ ");
				@signature->Append(@return_type->GetTypeName());
			};
		};
		
		return @signature;
	}

	method : public : GetReturnTag() ~ DocTag {
		return @return_tag;
	}

	method : public : GetReturnType() ~ DocType {
		return @return_type;
	}

	method : public : GetDesc() ~ String {
		return @desc;
	}

	method : public : GetParamTags() ~ StringHash {
		return @tags;
	}
	
	method : public : GetParams() ~ Vector {
		return @func_types;
	}
	
	method : native : Parse() ~ Bool {
		if(<>MatchCommentStart()) {
			return false;
		};
		@desc := ParseDesc();	

		# parse tags		
		are_tags := true;
		while(@cur_char <> '\0' & are_tags) {
			type := ParseIdent();
			if(type->Size() > 0) {
				if(type->Equals("@param")) {
					tag_name := ParseIdent();
					if(tag_name->Size() = 0) {
						return false;
					};

					tag_desc := ParseDesc();
					if(tag_desc->Size() = 0) {
						return false;
					};
					tag := DocTag->New(tag_name, tag_desc);
					@tags->Insert(tag->GetName(), tag);
				}
				else if(type->Equals("@return")) {
					tag_desc := ParseDesc();
					if(tag_desc->Size() = 0) {
						return false;
					};
					@return_tag := DocTag->New(tag_desc);
				}
				else {
					return false;
				};
			}
			else {
				are_tags := false;
			};
		};

		if(<>MatchCommentEnd()) {
			return false;
		};
		
		# parse function
		func_type := ParseIdent();
		if(func_type->Size() > 0) {
			if(func_type->Equals("function")) {
				@is_func := true;
			}
			else if(func_type->Equals("method")) {
				@is_func := false;
			}
			else if(func_type->Equals("New")) {
				@is_new := true;
				@is_func := false;
			}
			else {
				return false;
			};
		};

		if(@is_new) {
			@name := "New";
		}
		else {
			while(MatchChar(':')) {
				meta := ParseIdent();
				if(meta->Size() > 0) {
					if(meta->Equals("public")) {
						@is_public := true;
					}
					else if(meta->Equals("private")) {
						@is_public := false;
					}
					else if(meta->Equals("native")) {
						@is_native := true;
					}
					else if(meta->Equals("virtual")) {
						@is_virtual := true;
					}
					else {
						@name := meta;
					};
				};
			};
		};
		
		if(@name = Nil | <>MatchChar('(')) {
			return false;
		};
		
		# function parameters
		while(@cur_char <> ')') {
			param_name := ParseIdent();
			if(param_name->Size() = 0) {
				return false;
			};
		
			if(<>MatchChar(':')) {
				return false;
			};
		
			type_name := "";
			type_param := ParseType(param_name, type_name);
			if(type_param <> Nil) {
				@func_types->AddBack(type_param);
				MatchChar(',');
			};
		};
		
		if(<>MatchChar(')')) {
			return false;
		};
		
		if(<>@is_new) {
			if(<>MatchChar('~')) {
				return false;
			};

			# return type
			rtrn_name := ParseIdent();
			if(rtrn_name->Size() = 0) {
				return false;
			};
		
			rtrn_type := @types->Find(rtrn_name)->As(IntHolder);
			if(rtrn_type <> Nil) {
				@return_type := DocType->New("", rtrn_name, rtrn_type->Get()->As(DocType->Type));
			}
			else {
				@return_type := DocType->New("", rtrn_name, DocType->Type->CLASS);
			};
		};
		
		return true;
	}
	
	method : ParseType(param_name : String, type_name : String) ~ DocType {
		if(MatchChar('(')) {
			type_name->Append('(');

			if(ParseFuncType(type_name)) {
				return DocType->New(param_name, type_name, DocType->Type->FUNC);
			}
			else {
				return Nil;
			};
		}
		else {
			ident := ParseIdent();
			if(ident->Size() = 0) {
				return Nil;
			};
			type_name->Append(ident);
		
			param_type := @types->Find(type_name)->As(IntHolder);
			if(param_type <> Nil) {
				return DocType->New(param_name, type_name, param_type->Get()->As(DocType->Type));
			}
			else {
				return DocType->New(param_name, type_name, DocType->Type->CLASS);
			};
		};
	}
	
	method : ParseFuncType(type_name : String) ~ Bool {
		ident := ParseIdent();
		while(ident->Size() > 0) {
			type_name->Append(ident);
			if(MatchChar(',')) {
				type_name->Append(',');
			};
			ident := ParseIdent();
		};

		if(<>MatchChar(')')) {
			return false;
		};
		type_name->Append(')');

		if(<>MatchChar('~')) {
			return false;
		};
		type_name->Append('~');

		ident := ParseIdent();
		if(ident->Size() = 0) {
			return false;
		};
		type_name->Append(ident);
		
		return true;
	}
}

class DocTag {
	enum Type {
		PARAM,
		RETURN
	}	
	
	@type : Type;
	@name : String;
	@desc : String;

	New(name : String, desc : String) {
		@type := Type->PARAM;
		@name := name;
		@desc := desc;
	}

	New(desc : String) {
		@type := Type->RETURN;
		@name := "";
		@desc := desc;
	}
	
	method : public : GetType() ~ DocTag->Type {
		return @type;
	}

	method : public : GetName() ~ String {
		return @name;
	}

	method : public : GetDesc() ~ String {
		return @desc;
	}
}

class DocType {
	enum Type {
		BYTE,
		CHAR,
		INT,
		FLOAT,
		CLASS,
		FUNC,
		NIL
	}
	
	@name : String;
	@type_name : String;		
	@type : DocType->Type;
	
	New(name : String, type_name : String, type : Type) {
		@name := name;
		@type_name := type_name;
		@type := type;
	}

	method : public : GetName() ~ String {
		return @name;
	}

	method : public : GetTypeName() ~ String {
		return @type_name;
	}

	method : public : GetType() ~ Type {
		return @type;
	}
}


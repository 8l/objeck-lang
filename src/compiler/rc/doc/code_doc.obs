use System.IO;
use System.IO.File;
use Collection;


class Parser {
	function : Main(args : String[]) ~ Nil {
x := "    "->Trim();
IO.Console->Print("'")->Print(x)->PrintLine("'");		
		if(args->Size() = 1) {
			Parse(args[0]);
		};
	}
	
	function : native : Parse(file : String) ~ Nil {
		capture := 0;
		block := "";
		line_num := 0;
		comment_state := 0;							
		reader := FileReader->New(file);
		class_doc : ClassElem;
		while(<>reader->IsEOF()) {
			line := reader->ReadString();
			line_num += 1;
			
			i := 0;	
			while(i < line->Size()) {		
				# skip whitespace
				while((line->Get(i) = ' ' | line->Get(i) = '\t') & i < line->Size()) {
					i += 1;
				};
				
				# parse the line
				if(i < line->Size()) {
					# word
					if(line->Get(i)->IsChar() = true) {
						string := "";
						while(line->Get(i)->IsChar() = true | line->Get(i) = '.') {
							string->Append(line->Get(i));
							i += 1;
						};
						
						if(capture = 2 & string->Equals("class")) {
							capture := 3;
						}
						else if(capture = 2 & (string->Equals("function") | string->Equals("method"))) {
							capture := 4;
						};						
					}
					# other
					else {
						select(line->Get(i)) {
							label '{': {
								if(capture = 3) {
									block->Append(line);
									block->Append('\n');
									class_doc := ClassElem->New(block);								
									block := "";
"---"->PrintLine();									
								}
								else if(capture = 4) {
									block->Append(line);
									block->Append('\n');
									if(class_doc <> Nil) {
										class_doc->AddFunction(block);
										block := "";
"---"->PrintLine();										
									};
								};
								capture := 0;
								comment_state := 0;
							}
			
							label '#': {
								if(comment_state = 2) {
									capture := 2;
									comment_state := 0;
								}
								else if(comment_state = 0) {
									comment_state := 1;
								};
							}

							label '~': {
								if(comment_state = 1) {
									capture := 1;
									comment_state := 0;
								}
								else if(comment_state = 0) {
									comment_state := 2;
								};
							}
					
							other: {
								comment_state := 0;
							}
						};						
					};	
				};
				i += 1;
			};				
			
			if(capture > 0) {
				block->Append(line);
				block->Append('\n');
			};
		};
		reader->Close();
	}
}

class DocElem {
	@buffer : String;
	@buffer_index : Int;
	@cur_char : Char;
	@nxt_char : Char;
	@parsed : Bool;
	
	New(buffer : String) {
		@buffer := buffer;
		@buffer_index := 0;
		@parsed := false;
		NextChar();
	}
	
	method : NextChar() ~ Nil {
		if(@buffer_index < @buffer->Size()) {
			@cur_char := @buffer->Get(@buffer_index);
			@buffer_index += 1;
			if(@buffer_index < @buffer->Size()) {
				@nxt_char := @buffer->Get(@buffer_index);
			}
			else {
				@nxt_char := '\0';
			};
		}
		else {
			@cur_char := '\0';
			@nxt_char := '\0';
		};
	}
	
	method : ParseWhiteSpace() ~ Nil {
		while(@buffer_index < @buffer->Size() & (@cur_char = ' ' | @cur_char = '\t' | @cur_char = '\n')) {
			NextChar();
		};
	}

	method : MatchCommentStart() ~ Bool {
		ParseWhiteSpace();
		match := @cur_char = '#' & @nxt_char = '~';
		if(match) {
			NextChar();	NextChar();
			return true;
		};
		
		return false;
	}

	method : MatchCommentEnd() ~ Bool {
		ParseWhiteSpace();
		match := @cur_char = '~' & @nxt_char = '#';
		if(match) {
			NextChar();	NextChar();
			return true;
		};
		
		return false;
	}
	
	method : MatchChar(char : Char) ~ Bool {
		match := @cur_char = char;
		if(match) {
			NextChar();
			return true;
		};
		
		return false;
	}

	method : MatchIdent(ident : String) ~ Bool {
		return ParseIdent()->Equals(ident);
	}

	method : ParseIdent() ~ String {
		ParseWhiteSpace();
		
		ident := "";
		done := false;
		while(<>done) {
			select(@cur_char) {
				label ' ':
				label '\r':
				label '\n':
				label '{':
				label ':':
				label '(':
				label ')':
				label '~':
				label '#':
				label '\0': {
					done := true;
				}				
				other: {
					ident->Append(@cur_char);
					NextChar();
				}
			};
		};
		
		return ident->Trim();
	}
	
	method : ParseDesc() ~ String {
		ParseWhiteSpace();
		
		ident := "";
		done := false;
		while(<>done) {
			select(@cur_char) {
				label ' ':
				label '\r':
				label '\n':
				label '#': {
					ident->Append(' ');
					NextChar();
				}
				label '{':
				label ':':
				label '(':
				label ')':
				label '~':
				label '@':
				label '\0': {
					done := true;
				}				
				other: {
					ident->Append(@cur_char);
					NextChar();
				}
			};
		};
		
		return ident->Trim();
	}

	method : WasParsed() ~ Bool {
		return @parsed;
	}
}

class ClassElem from DocElem {
	@name : String;
	@functions : StringMap;
	
	New(buffer : String) {
		Parent(buffer);
		@parsed := Parse();
	}

	method : public : GetName() ~ String {
		return @name;
	}

	method : public : AddFunction(block : String) ~ Nil {
		func := FuncElem->New(block);
		if(func->WasParsed()) {
			@functions->Insert(func->GetName(), func);
		};
	}

	method : native : Parse() ~ Bool {
		if(<>MatchCommentStart()) {
			return false;
		};
		desc := ParseDesc();
		if(<>MatchCommentEnd()) {
			return false;
		};

		if(<>MatchIdent("class")) {
			return false;
		};

		@name := ParseIdent();
		if(@name->Size() > 0) {
			return true;
		};
		
		return false;
	}
}

class FuncElem from DocElem {
	@name : String;
	@params : List;
	
	New(buffer : String) {
		Parent(buffer);
		@parsed := Parse();
	}

	method : public : GetName() ~ String {
		return @name;
	}

	method : native : Parse() ~ Bool {
		if(<>MatchCommentStart()) {
			return false;
		};
		desc := ParseDesc();
IO.Console->Print("desc ='")->Print(desc->Trim())->PrintLine("'");

		return false;
	}
}

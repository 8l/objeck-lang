use System.IO;
use System.IO.File;
use Collection;


class Parser {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			Parse(args[0]);
		};
	}
	
	function : native : Parse(file : String) ~ Nil {
		reserved := StringMap->New();
		reserved->Insert("bundle", "keyword: bundle");
		reserved->Insert("class", "keyword: class");
		reserved->Insert("method", "keyword: method");
		reserved->Insert("function", "keyword: function");
		reserved->Insert("native", "keyword: native");
		reserved->Insert("public", "keyword: public");
		reserved->Insert("private", "keyword: private");
		reserved->Insert("Int", "keyword: Int");
		reserved->Insert("Float", "keyword: Float");
		reserved->Insert("Char", "keyword: Char");
		reserved->Insert("Byte", "keyword: Byte");
		
		capture := 0;
		block := "";
		line_num := 0;
		comment_state := 0;							
		reader := FileReader->New(file);
		class_doc : ClassDoc;
		while(reader->IsEOF() <> true) {
			line := reader->ReadString();
			line_num += 1;
				
			i := 0;	
			while(i < line->Size()) {		
				# skip whitespace
				while((line->Get(i) = ' ' | line->Get(i) = '\t') & i < line->Size()) {
					i += 1;
				};
				
				# parse the line
				if(i < line->Size()) {
					# word
					if(line->Get(i)->IsChar() = true) {
						string := "";
						while(line->Get(i)->IsChar() = true | line->Get(i) = '.') {
							string->Append(line->Get(i));
							i += 1;
						};
					
						result := reserved->Find(string)->As(String);
						if(result <> Nil) {
							if(capture = 2 & string->Equals("class")) {
								capture := 3;
							}
							else if(capture = 2 & (string->Equals("function") | string->Equals("method"))) {
								capture := 4;
							};
						};
					}
					# other
					else {
						select(line->Get(i)) {
							label '{': {
								if(capture = 3) {
"class tag"->PrintLine();
									block->Append(line);
									block->Append('\n');
									class_doc := ClassDoc->New(block);
									block := "";
								}
								else if(capture = 4) {
"function/method tag"->PrintLine();									
									block->Append(line);
									block->Append('\n');
									if(class_doc <> Nil) {
										class_doc->AddFunctionMethod(block);
										block := "";
									};
								};
								capture := 0;
								comment_state := 0;
							}
			
							label '#': {
								if(comment_state = 2) {
									capture := 2;
									comment_state := 0;
								}
								else if(comment_state = 0) {
									comment_state := 1;
								};
							}

							label '~': {
								if(comment_state = 1) {
									capture := 1;
									comment_state := 0;
								}
								else if(comment_state = 0) {
									comment_state := 2;
								};
							}
					
							other: {
								comment_state := 0;
							}
						};						
					};	
				};
				i += 1;
			};				
			
			if(capture > 0) {
				block->Append(line);
				block->Append('\n');
			};
		};
		reader->Close();
	}
}

class ClassDoc {
	@functions : StringMap;
	
	New(buffer : String) {
	}

	method : public : GetName() ~ String {
		return "";
	}

	method : public : AddFunctionMethod(buffer : String) ~ Nil {
		func_method := ClassFunctionMethod->New(buffer);
#		@functions->Insert(func_method->GetName(), func_method);
	}
}

class ClassFunctionMethod {
	@buffer : String;
	@buffer_index : Int;
	@cur_char : Char;
	@nxt_char : Char;
	@comment : String;
	@name : String;

	New(buffer : String) {
# buffer->PrintLine();	
		@buffer := buffer;
		@buffer_index := 0;
		NextChar();
		Parse()->PrintLine();
	}

	method : NextChar() ~ Nil {
		if(@buffer_index < @buffer->Size()) {
			@cur_char := @buffer->Get(@buffer_index);
			@buffer_index += 1;
			if(@buffer_index < @buffer->Size()) {
				@nxt_char := @buffer->Get(@buffer_index);
			}
			else {
				@nxt_char := '\0';
			};
		}
		else {
			@cur_char := '\0';
			@nxt_char := '\0';
		};
	}

	method : native : Parse() ~ Bool {
		state := 0;
		line : String;
		do {
			line_frag := ParseFrag();
			if(line_frag = Nil) {
				return false;
			};
			
IO.Console->Print("frag='")->Print(line_frag)->PrintLine("'");

			if(line_frag->StartsWith("@param")) {
"-0-"->PrintLine();
				ParseLine(line, state);
				state := 2;
				line := String->New(line_frag);
			}
			else if(line_frag->StartsWith("@return")) {
				ParseLine(line, state);
				state := 3;
				line := String->New(line_frag);
			}
			else if(line_frag->StartsWith("function")) {
				ParseLine(line, state);
				state := 4;
				line := String->New(line_frag);
"--function--"->PrintLine();
			}
			else if(line_frag->StartsWith("method")) {
				ParseLine(line, state);
				state := 5;
				line := String->New(line_frag);
"--method--"->PrintLine();
			}
			else if(line_frag->StartsWith("#~")) {

				state := 1;
			}
			else if(line_frag->EndsWith("~#")) {
				state := 7;
			}
			else {				
				if(state = 1) {
					line := String->New(line_frag);
					state := 6;
				}
				else {
					line += line_frag);
				};
			};
		}
		while(state <> 7);
		
		return true;
	}	

	method : native : ParseLine(line : String, state : Int) ~ Nil {
		line->PrintLine();
	}	

	method : native : ParseParam(line : String) ~ Nil {
		index := "@param"->Size() + 1;
		start := index;
		while(index < line->Size() & line->Get(index) <> ' ' & line->Get(index) <> '\t') {
			index += 1;
		};
		name := line->SubString(start, index - start);
		desc := line->SubString(index + 1, line->Size() - index - 1);
IO.Console->Print("\tparam: name='")->Print(name)->Print("', desc='")->Print(desc)->PrintLine("'");
	}

	method : native : ParseReturn(line : String) ~ Nil {
		index := "@return"->Size() + 1;
		desc := line->SubString(index, line->Size() - index);
IO.Console->Print("\treturn: desc='")->Print(desc)->PrintLine("'");
	}

	method : native : ParseFrag() ~ String {
		while(@buffer_index < @buffer->Size() & (@cur_char = ' ' | @cur_char = '\t' | @cur_char = '\n')) {
			NextChar();
		};

		start := @buffer_index - 1;
		while(@buffer_index < @buffer->Size() & @cur_char <> '\n') {
			NextChar();
		};
		
		if(@buffer_index < @buffer->Size()) {
			return @buffer->SubString(start, @buffer_index - start - 1);
		};
		
		return Nil;
	}
	
	method : public : GetName() ~ String {
		return "";
	}
}

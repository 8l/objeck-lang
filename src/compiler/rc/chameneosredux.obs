use Concurrency;

bundle Default {
	enum Colour {
		blue,
		red,
		yellow,
		invalid
	}
	
	class ChameneosRedux {
		function : Main(args : String[]) ~ Nil {
		}
		
    	function : DoCompliment(c1 : Colour , c2 : Colour) ~ Colour {
			select (c1) {
				label Colour->blue: {
		     		select (c2) {
						label Colour->blue: {
							return Colour->blue;
						}

						label Colour->red: {
							return Colour->yellow;
						}

						label Colour->yellow: {
							return Colour->red;
						}

						other: {
						}
					};
				}

				label Colour->red: {
					select (c2) {
						label Colour->blue: {
							return Colour->yellow;
						}

						label Colour->red: {
							return Colour->red;
						}

						label Colour->yellow: {
							return Colour->blue;
						}

						other: {
						}
					};
				}

				label Colour->yellow: {
					select (c2) {
						label Colour->blue: {
							return Colour->red;
						}

						label Colour->red: {
							return Colour->blue;
						}

						label Colour->yellow: {
							return Colour->yellow;
						}

						other: {
						}
					};
				}
			};
			
			return Colour->invalid;
		}
	}

	class Creature {
		@place : MeetingPlace;
   		@count : Int;
   		@sameCount : Int;
		@colour : Colour;
		@id : Int;
		@two_met : Bool;
		@sameid : Bool;
		@CreatureID : static : Int;
		
		New(place : MeetingPlace, colour: Colour) {
			@place := place;
   			@count := 0;
			@sameCount := 0;
			CreatureID += 1;
   			@id := CreatureID;
			@colour := colour;
			@two_met := false;
		}
	}
	
	class MeetingPlace {
   		@mutex : ThreadMutex;
   		@meetingsLeft : Int;
		@firstCreature : Creature;
		
        New(meetings : Int) {
            @meetingsLeft := meetings;
			@mutex := ThreadMutex->New(GetInstanceID()->ToString());
        }
        
        method : public : Meet(cr : Creature) ~ Bool {
			return false;
        }
    }
}

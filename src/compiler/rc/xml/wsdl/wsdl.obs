use System.IO;
use System.IO.File;
use HTTP;
use XML;
use Collection;

bundle Default {
	class Wsdl {
		@namespace : String;
		@types : StringMap;
		@messages : StringMap;
		@ports : StringMap;
		
		function : Main(args : String[]) ~ Nil {
			if(args->Size() > 0) {
				wsdl := Wsdl->New(args[0]);
				wsdl->GetNamespace();
			};
		}
		
		New(name : String) {
			@types := StringMap->New();
			@messages := StringMap->New();
			@ports := StringMap->New();
			
			Parse(name);
		}
		
		method : public : GetNamespace() ~ String {
			return @namespace;
		}

		method : public : GetType(name : String) ~ Type {
			return @types->Find(name)->As(Type);
		}
		
		method : public : GetMessage(name : String) ~ String {
			return @messages->Find(name)->As(String);
		}
		
		method : public : GetPort(name : String) ~ Port {
			return @ports->Find(name)->As(Port);
		}
				
		method : Parse(name : String) ~ Nil {
			parser := XmlParser->New(FileReader->ReadFile(name));
			if(parser->Parse()) {
				definitions := parser->FindElements("/definitions/service/port");
				if(definitions <> Nil & definitions->Size() > 0) {
					definition := definitions->Get(0)->As(XmlElement);
					binding := definition->GetAttribute("binding")->GetValue();
					name := definition->GetAttribute("name")->GetValue();
					"Service: binding={$binding}, name={$name}"->PrintLine();			
				};
				
				# bindings
				bindings := parser->FindElements("/definitions/binding/binding");
				if(bindings <> Nil) {
					found := false;
					for(i := 0; found = false & i < bindings->Size(); i +=1;) {
						binding := bindings->Get(i)->As(XmlElement);
						binding_parent := binding->GetParent();
						"Bindings:"->PrintLine();
						operations := parser->FindElements("/definitions/binding/operation");
						if(operations <> Nil) {						
							each(j : operations) {
								operation := operations->Get(j)->As(XmlElement);
								if(binding_parent <> Nil & operation->GetParent() = binding_parent) {	
									name := operation->GetAttribute("name")->GetValue();	
									"\toperation: name={$name}"->PrintLine();
								};
							};							 	
							found := true;
						};													
					};
				};
				
				operations := parser->FindElements("/definitions/portType/operation");
				if(operations <> Nil) {
					count := operations->Size();
					"Operations: count={$count}"->PrintLine();
					each(i : operations) {
						operation := operations->Get(i)->As(XmlElement);
						name := operation->GetAttribute("name")->GetValue();
						"\toperation: name={$name}"->PrintLine();
						#input
						inputs := operation->FindElements("/operation/input");
						if(inputs <> Nil & inputs->Size() > 0) {
							input := inputs->Get(0)->As(XmlElement);
							message := input->GetAttribute("message")->GetValue();
							"\t\tinput: message={$message}"->PrintLine();
						};
						# output
						outputs := operation->FindElements("/operation/output");
						if(outputs <> Nil & outputs->Size() > 0) {
							output := outputs->Get(0)->As(XmlElement);
							message := output->GetAttribute("message")->GetValue();
							"\t\toutput: message={$message}"->PrintLine();
						};
					};
				};
				
				# messages
				messages := parser->FindElements("/definitions/message");
				if(messages <> Nil) {
					count := messages->Size();
					"Messages: count={$count}"->PrintLine();
					each(i : messages) {
						message := messages->Get(i)->As(XmlElement);
						name := message->GetAttribute("name")->GetValue();
						"\tmessage: name={$name}"->PrintLine();
						parts := message->GetChildren();
						if(parts <> Nil & parts->Size() > 0) {
							part := parts->Get(0)->As(XmlElement);
							name := part->GetAttribute("name")->GetValue();							
							element_node := part->GetAttribute("element");
							if(element_node <> Nil) {
								element := element_node->GetValue();
								"\t\tpart: name={$name}, element={$element}"->PrintLine();
							}
							else {
								type := part->GetAttribute("type")->GetValue();							
								"\t\tpart: name={$name}, type={$type}"->PrintLine();
							};
						};
					};
				};
				
				# types
				schemas := parser->FindElements("/definitions/types/schema");
				if(schemas <> Nil & schemas->Size() > 0) {
					schema := schemas->Get(0)->As(XmlElement);
					namespace := schema->GetAttribute("targetNamespace")->GetValue();
					"Types: namespace={$namespace}"->PrintLine();
					
					elements := schema->FindElements("/schema/element");
					if(elements <> Nil) {
						each(i : elements) {
							element := elements->Get(i)->As(XmlElement);
							name := element->GetAttribute("name")->GetValue();
							"\telement: name={$name}"->PrintLine();
						};
					};
				};
			};
		}
	}
	
	class Type {
		@name : String;
		@type : String;
		@parameters : Vector;
		
		New(name : String, type : String) {
			@name := name;
			@type := type;
			@parameters := Vector->New();
		}
		
		method : public : AddParameter(param : Parameter) ~ Nil {
			@parameters->AddBack(param);
		}
		
		method : public : GetParameters() ~ Vector {
			return @parameters;
		}
	}
	
	class Parameter {
		@name : String;
		@type : String;
		
		New(name : String, type : String) {
			@name := name;
			@type := type;
		}

		method : public : GetName() ~ String {
			return @name;
		}
	
		method : public : GetType() ~ String {
			return @type;
		}
		
		method : public : ToString() ~ String {
			buffer := String->New();
			buffer->Append("name=");
			buffer->Append(@name);
			buffer->Append(", type=");
			buffer->Append(@type);	
			return buffer;
		}
	}
	
	class Port {
		@name : String;
		@operations : StringMap;
		
		New(name : String) {
			@name := name;
			@operations := StringMap->New();
		}
		
		method : public : AddOperation(name: String, value: String) ~ Nil {
			@operations->Insert(name, value);
		}
		
		method : public : GetOperation(name: String) ~ String {
			return @operations->Find(name)->As(String);
		}
		
		method : public : GetName() ~ String {
			return @name;
		}
		
		method : public : GetInputName() ~ String {
			return @operations->Find("wsdl:input");
		}
	}
}

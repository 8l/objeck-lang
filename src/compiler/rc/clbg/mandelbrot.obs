use Concurrency;

bundle Default {

	class MandelBrot {
		function : Main(args : String[]) ~ Nil {
			n := 200;
         if (args->Size() > 0) {
            n := args[0]->ToInt();
         };

			CaculateThread->Init(n);

			threads := Thread->New[3];
			each(i : threads) {
				threads[i] := CaculateThread->New(i->ToString());
			};
			each(i : threads) {
				threads[i]->Execute(Nil);
			};
			each(i : threads) {
				threads[i]->Join();
			};
"Fin."->PrintLine();
		}
	}

	class CaculateThread from Thread {
		@size : static : Int;
		@output_data : static : Byte[,];
		@bytes_per_line : static : Int[];
		@inverse_N : static : Float;
		@current_line : static : Int;
		@inc_mutex : static : ThreadMutex;

		New(id : String) {
			Parent(id);
		}

		function : Init(size : Int) ~ Nil {
			@size := size;
			width_bytes := size/8+1;
			@output_data := Byte->New[size, width_bytes];
			bytes_per_line := Int->New[size];
			@inverse_N := 2.0 / size;
			@current_line := 0;
			@inc_mutex := ThreadMutex->New("inc_mutex");

#			Compute(size, output_data, bytes_per_line);
		}

		method : public : Run(param : System.Base) ~ Nil {
		}

		method : public : Compute() ~ Nil {
			y : Int;
			critical(@inc_mutex) {
				y := @current_line;
				@current_line+=1;
			};
			
		}
	}
}

bundle Default {
	class Hello {
		target : static : String;
		possibilities : static : Char[];
		C : static : Int;
  		minMutateRate : static : Float;
  		perfectFitness : static : Int;
  		parent : static : String ;
  		rand : static : Float;
  		
		function : Init() ~ Nil {
			target := "METHINKS IT IS LIKE A WEASEL";
			possibilities := "ABCDEFGHIJKLMNOPQRSTUVWXYZ "->ToCharArray();
			C := 100;
			minMutateRate := 0.09;
			perfectFitness := target->Size();
		}
		
		function : fitness(trial : String) ~ Int {
    		retVal := 0;
trial->Size()->PrintLine();
trial->PrintLine();

target->Size()->PrintLine();
target->PrintLine();

    		for(i := 0; i < trial->Size() & i < target->Size(); i += 1;) {
i->PrintLine();    		
      			if(trial->Get(i) = target->Get(i)) {
      				retVal += 1;
      			};
      		};
      		
    		return retVal;
    	}
    	
    	function : newMutateRate() ~ Float {
   			return ((perfectFitness->As(Float) - fitness(parent)) / 
   				perfectFitness * (1.0 - minMutateRate))->Abs();
  		}
  		
  		function : mutate(parent : String, rate : Float) ~ String {
			retVal := "";
			
			for(i := 0; i < parent->Size(); i += 1;) {
				rand := Float->Random();
				if(rand <= rate) {				
					rand *= 1000.0;
					xx := rand->As(Int);
					index : Int := xx % (possibilities->Size() - 1);
#					index : Int := rand % possibilities->Size();
					retVal->Append(possibilities[index]);
				}
				else {		
					retVal->Append(parent->Get(i));
				};
			};
			
"$$$"->PrintLine();
			return retVal;
  		}
  		
  		function : Main(args : String[]) ~ Nil {
			Init();
						
			parent := mutate(target, 1.0);
parent->PrintLine();

			iter := 0;
			while(target->Equals(parent) <> true) {
				rate := newMutateRate();
				iter += 1;
				
				if(iter % 100 = 0){
#					System.out.println(iter +": "+parent+ ", fitness: "+fitness(parent)+", rate: "+rate);
					"!!!! "->PrintLine(); # parent->PrintLine();
				};
				
				bestSpawn : String;
				bestFit := 0;

				for(i := 0; i < C; i += 1;) {
        			spawn := mutate(parent, rate);
        			fitness := fitness(spawn);
        
        			if(fitness > bestFit) {
          				bestSpawn := spawn;
          				bestFit := fitness;
					};
				};

				if(bestFit > fitness(parent)) {
					parent := bestSpawn;
				};	
			};
			parent->PrintLine();
		}
	}
}

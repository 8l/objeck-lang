use Collection;

class Test {
	function : Main(args : String[]) ~ Nil {
		one := Node->New(1);
		two := Node->New(2);
		three := Node->New(3);
		four := Node->New(4);
		five := Node->New(5);
		six := Node->New(6);
		seven := Node->New(7);
		eight := Node->New(8);
		nine := Node->New(9);
		one->SetLeft(two);
		one->SetRight(three);
		two->SetLeft(four);
		two->SetRight(five);
		three->SetLeft(six);
		four->SetLeft(seven);
		six->SetLeft(eight);
		six->SetRight(nine);
		
		Preorder(one);
		"---"->PrintLine();
		Inorder(one);
  		"---"->PrintLine();
		Postorder(one);
		"---"->PrintLine();
		Levelorder(one);
	}

	function : Preorder(node : Node) ~ Nil {
		if(node <> Nil) {
			node->GetData()->PrintLine();
			Preorder(node->GetLeft());		
			Preorder(node->GetRight());		
		};
	}	
	
	function : Inorder(node : Node) ~ Nil {
		if(node <> Nil) {
			Inorder(node->GetLeft());	
			node->GetData()->PrintLine();
			Inorder(node->GetRight());		
		};
	}
	
	function : Postorder(node : Node) ~ Nil {
		if(node <> Nil) {
			Postorder(node->GetLeft());		
			Postorder(node->GetRight());
			node->GetData()->PrintLine();
		};
	}
	
	function : Levelorder(node : Node) ~ Nil {
		nodequeue := Collection.Queue->New();
		if(node <> Nil) {
			nodequeue->Add(node);
		};
		
		while(nodequeue->IsEmpty() = false) {
			next := nodequeue->Remove()->As(Node);
			next->GetData()->PrintLine();
			if(next->GetLeft() <> Nil) {
				nodequeue->Add(next->GetLeft());
			};
			
			if(next->GetRight() <> Nil) {
				nodequeue->Add(next->GetRight());
			};
		};
	}
}
	
class Node {
	@left : Node;
	@right : Node;
	@data : Int;

	New(data : Int) {
		@data := data;
	}	

	method : public : GetData() ~ Int {
		return @data;
	}

	method : public : SetLeft(left : Node) ~ Nil {
		@left := left;
	}

	method : public : GetLeft() ~ Node {
		return @left;
	}

	method : public : SetRight(right : Node) ~ Nil {
		@right := right;
	}

	method : public : GetRight() ~ Node {
		return @right;
	}
}


class RowEchelon {
	function : Main(args : String[]) ~ Nil {
		matrix := [
			[1, 2, -1,  -4 ]
			[2, 3, -1, -11 ]
			[-2, 0, -3,  22]
		];
		
#~
		matrix := [
			[1, 2, -2 ]
			[2, 3, 0]
			[-1, -1, -3]
			[-4, -11, 22]
		];
~#

#~
		matrix := Int->New[3, 4];
		matrix[0,0] := 1;
		matrix[0,1] := 2;
		matrix[0,2] := -1;
		matrix[0,3] := -4;

		matrix[1,0] := 2;
		matrix[1,1] := 3;
		matrix[1,2] := -1;
		matrix[1,3] := -11;
		
		matrix[2,0] := -2;
		matrix[2,1] := 0;
		matrix[2,2] := -3;
		matrix[2,3] := 22;
~#

		sizes := matrix->Size();

		for(i := 0; i < sizes[0]; i += 1;) {
			for(j := 0; j < sizes[1]; j += 1;) {
				IO.Console->Print(matrix[j,i])->Print(",");
			};
			IO.Console->PrintLine();
		};


		
		matrix := Rref(matrix);

		
	
	
		
		for(i := 0; i < sizes[0]; i += 1;) {
			for(j := 0; j < sizes[1]; j += 1;) {
				IO.Console->Print(matrix[i,j])->Print(",");
			};
			IO.Console->PrintLine();
		};
	}

	function : Rref(matrix : Int[,]) ~ Int[,] {
		lead := 0;
		sizes := matrix->Size();
		rowCount := sizes[0];
		columnCount := sizes[1];

rowCount->PrintLine();
columnCount->PrintLine();


		for(r := 0; r < rowCount; r+=1;) {
			if (columnCount <= lead) {
				break;
			};

			i := r;
			while(matrix[i, lead] = 0) {
				i+=1;
				if (i = rowCount) {
					i := r;
					lead += 1;
					if (columnCount = lead) {
						lead-=1;
						break;
 					};
				};
			};	
			
			for (j := 0; j < columnCount; j+=1;) {
				temp := matrix[r, j];
				matrix[r, j] := matrix[i, j];
				matrix[i, j] := temp;
			};

			div := matrix[r, lead];
			for(j := 0; j < columnCount; j+=1;) {
				matrix[r, j] /= div;
			};

			for(j := 0; j < rowCount; j+=1;) {
				if (j <> r) {
					sub := matrix[j, lead];
					for (k := 0; k < columnCount; k+=1;) {
						matrix[j, k] -= sub * matrix[r, k];
					};
 				};
			};
			lead+=1;		
		};
		
		return matrix;
	}
}

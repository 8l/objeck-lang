use IO;
use Struct;

bundle Default {
	class DocParser {
		@classes : Vector;

		New() {
			@classes := Vector->New();
		}
		
		function : Main(args : String[]) ~ Nil {
			if(args->Size() = 1) {
				parser := DocParser->New();
				parser->ParseFile(args[0]);
			};
		}
    	
		function : native : PrintComments(comments : Vector) ~ Nil {
			each(i : comments) {
				comment := comments->Get(i)->As(String);
				comment->PrintLine();
			};
		}
		
		method : native : ParseClass(line : String) ~ DocClass {
			parser := Parser->New(line);
			tokens := parser->Parse();

			if(tokens->Size() = 3) {
				token := tokens->Get(1)->As(Token);
				if(token->GetType() = TokenType->IDENT) {
IO.Console->Print("class=")->PrintLine(token->GetValue());
					return DocClass->New(token->GetValue());
				};
			};

			return Nil;
		}

		method : native : ParseMethod(line : String) ~ DocMethod {
			parser := Parser->New(line);
			tokens := parser->Parse();

			i := 0;			
			while(i < tokens->Size()) {
				token := tokens->Get(i)->As(Token);
				if(token->GetType() = TokenType->OPRN) {
					break;
				};
				i += 1;
			};

			if(i < tokens->Size()) {
				i -= 1;
				token := tokens->Get(i)->As(Token);
IO.Console->Print("function/method=")->PrintLine(token->GetType()->As(Int));				
			};
			
			return Nil;
		}

		method : public : native : ParseFile(file : String) ~ Nil {
			current_comments : Vector;
			current_class : DocClass;
			current_method : DocMethod;
			
			line_num := 0; comment_start := 0;	comment_end := 0;
			reader := FileReader->New(file);			
			while(reader->IsEOF() <> true) {
				line := reader->ReadString()->Trim();
				line_num += 1;

				is_start := line->StartsWith("#~");	is_end := line->EndsWith("~#");
				if(is_start | is_end) {
					if(is_start) {
						current_comments := Vector->New();
						comment_start := line_num;
					};

					if(is_end) {
						comment_end := line_num;
IO.Console->Print("comment block: start=")->Print(comment_start)->Print(", end=")->PrintLine(comment_end);
						current_comments->AddBack(line);
						comment_start := 0;
						PrintComments(current_comments);
					};
				}
				else if(line->StartsWith("class")) {
					current_class := ParseClass(line);
					if(current_class <> Nil) {
						@classes->AddBack(current_class);
					};
IO.Console->Print("class: line=")->Print(line_num)->Print(", line=")->PrintLine(line);
				}
				else if(line->StartsWith("function") | line->StartsWith("method")) {
					current_method := ParseMethod(line);
					if(current_method <> Nil & current_class <> Nil) {
						
					};
IO.Console->Print("function/method: line=")->Print(line_num)->Print(", line=")->PrintLine(line);
					# consider parsing the line, what if the function/method spans multiple lines?
				};

				if(comment_start <> 0) {
					current_comments->AddBack(line);
				};
			};
		}
	}	
}

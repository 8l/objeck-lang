use IO;
use Struct;

# to compile: -lib struct.obl

bundle Default {  
  class Hello {
    New() {
    }

    function : Main(args : String[]) ~ Nil {
      Run();
    }
    
    function : native : Run() ~ Nil {
      reserved := StringMap->New();
      reserved->Insert("function", "keyword: function"->As(Base));
      reserved->Insert("Int", "keyword: Int"->As(Base));
      reserved->Insert("Float", "keyword: Float"->As(Base));
      reserved->Insert("class", "keyword: class"->As(Base));
      reserved->Insert("bundle", "keyword: bundle"->As(Base));
      reserved->Insert("native", "keyword: native"->As(Base));

      reader := FileReader->New("..\examples\hello.obs");
      line_num := 0;
      while(reader->IsEOF() <> true) {
        line := reader->ReadString();
        line_num := line_num + 1;
                  
        i := 0;  
        while(i < line->Size()) {    
          # skip whitespace
          while((line->Get(i) = ' ' | line->Get(i) = '\t') & i < line->Size()) {
            i += 1;
          };
          
          # parse
          if(i < line->Size()) {
            # word
            if(line->Get(i)->IsChar() = true) {
              string := "";
              while(line->Get(i)->IsChar() = true | line->Get(i) = '.') {
              string->Append(line->Get(i));
              i += 1;
            };
  
            result : String := reserved->Find(string);
            if(result <> Nil) {
              Console->PrintLine(result);
            }
            else {
              Console->Print("string '")->Print(string)->PrintLine("'");
            };
          }
          # number
          else if(line->Get(i)->IsDigit() = true) {
            number := "";
            is_dec := false;
            while(line->Get(i)->IsDigit() = true | line->Get(i) = '.') {
              if(line->Get(i) = '.') {
              is_dec := true;
              };
              
              number->Append(line->Get(i));
              i += 1;
            };
  
            if(is_dec) {
              Console->Print("decimal '")->Print(number)->PrintLine("'");
            }
            else {
              Console->Print("integer '")->Print(number)->PrintLine("'");
            };
          }
          # other
          else {
            select(line->Get(i)) {
              label '(': {
              "opren"->PrintLine();
              }
              
              label ')': {
              "cpren"->PrintLine();
              }
  
              label '[': {
              "obrace"->PrintLine();
              }
              
              label ']': {
              "cbrace"->PrintLine();
              }      
  
              
              label '{': {
              "ocbrace"->PrintLine();
              }
      
              label '}': {
              "ccbrace"->PrintLine();
              }
              
              label '#': {
              "pound"->PrintLine();
              }
  
              label '/': {
              "div"->PrintLine();
              }
  
              label '*': {
              "mul"->PrintLine();
              }
  
              label '+': {
              "add"->PrintLine();
              }
  
              label '-': {
              "sub"->PrintLine();
              }
  
              label '%': {
              "mod"->PrintLine();
              }
#~              
              other: {
              Console->Print("char='")->Print(line->Get(i))->PrintLine("'");
              }
~#
            };
            i += 1;
            };  
          };
        };
      };
      reader->Close();
    }
  }
}

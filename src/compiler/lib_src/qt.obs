use Structure;

bundle Qt {
	# QLayout interface
	interface QLayout {
	}
	
	# QLayoutItem interface
	interface QLayoutItem {
	}
	
	# QBoxLayout class
	enum LayoutDirection := 0 {
		LeftToRight, 
		RightToLeft, 
		TopToBottom, 
		BottomToTop
	}
	
	class QBoxLayout from QObject implements QLayout, QLayoutItem {
		New(direction : LayoutDirection) {
			Parent();
			if(@native_ptr = 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(direction->As(Int));
				@lib_proxy := QWidget->GetDllProxy();
				@lib_proxy->CallFunction("qt_qboxlayout_new", array_args);
				rtrn_value := array_args[0]->As(IntHolder);
				@native_ptr := rtrn_value->Get();
			};
		}
		
		New(direction : LayoutDirection, parent : QWidget) {
			Parent();
			if(@native_ptr = 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(direction->As(Int));
				array_args[2] := parent;
				@lib_proxy := QWidget->GetDllProxy();
				@lib_proxy->CallFunction("qt_qboxlayout_new_1", array_args);
				rtrn_value := array_args[0]->As(IntHolder);
				@native_ptr := rtrn_value->Get();
			};
		}
		
		method : public : AddWidget(widget : QWidget) ~ Nil {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(@native_ptr);
			array_args[1] := widget;
			@lib_proxy := QWidget->GetDllProxy();
			@lib_proxy->CallFunction("qt_qboxlayout_addwidget", array_args);
		}
	}
	
	# QObject class
	class QObject {
		@native_ptr : Int;
		@lib_proxy : static : DllProxy;
		
#~		
		New() {	
			if(@native_ptr = 0) {
				#	TODO
			};
		}
~#

		function : Connect(sender : QObject, signal : String, recv : QObject, mthd : String) ~ Nil {
			array_args := Base->New[4];
			array_args[0] := sender;
			array_args[1] := signal;
			array_args[2] := recv;
			array_args[3] := mthd;
			@lib_proxy := QWidget->GetDllProxy();
			@lib_proxy->CallFunction("qt_object_connect", array_args);
		}
	}
	
	# QWidget class
	class QWidget from QObject {
		New() {
			Parent();
			
			if(@native_ptr = 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New();
				@lib_proxy := QWidget->GetDllProxy();
				@lib_proxy->CallFunction("qt_widget_new", array_args);
				rtrn_value := array_args[0]->As(IntHolder);
				@native_ptr := rtrn_value->Get();
			};
		}
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("lib/osx/qt/ojk_qt.1");
			};

			return @lib_proxy;
		}
		
		method : public : SetWindowTitle(title : String) ~ Nil {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(@native_ptr);
			array_args[1] := title;
			@lib_proxy := QWidget->GetDllProxy();
			@lib_proxy->CallFunction("qt_widget_set_title", array_args);
		}
		
		method : public : Resize(width : Int, height : Int) ~ Nil {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New(@native_ptr);
			array_args[1] := IntHolder->New(width);
			array_args[2] := IntHolder->New(height);
			@lib_proxy := QWidget->GetDllProxy();
			@lib_proxy->CallFunction("qt_widget_resize", array_args);
		}
		
		method : public : Move(width : Int, height : Int) ~ Nil {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New(@native_ptr);
			array_args[1] := IntHolder->New(width);
			array_args[2] := IntHolder->New(height);
			@lib_proxy := QWidget->GetDllProxy();
			@lib_proxy->CallFunction("qt_widget_move", array_args);
		}
		
		method : public : Show() ~ Nil {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New(@native_ptr);
			@lib_proxy := QWidget->GetDllProxy();
			@lib_proxy->CallFunction("qt_widget_show", array_args);
		}
	}

	# QAppliction class
	class QAppliction {
		@native_ptr : Int;
		@lib_proxy : static : DllProxy;
		
		New() {
			if(@native_ptr = 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New();
				@lib_proxy := QWidget->GetDllProxy();
				@lib_proxy->CallFunction("qt_app_new", array_args);
				
				rtrn_value := array_args[0]->As(IntHolder);
				@native_ptr := rtrn_value->Get();
			};
		}
		
		method : public : Exec() ~ Nil {
			if(@native_ptr <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@native_ptr);
				@lib_proxy := QWidget->GetDllProxy();
				@lib_proxy->CallFunction("qt_app_exec", array_args);
			};
		}
		
		method : public : Beep() ~ Nil {
			if(@native_ptr <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@native_ptr);
				@lib_proxy := QWidget->GetDllProxy();
				@lib_proxy->CallFunction("qt_app_beep", array_args);
			};
		}
		
		method : public : Delete() ~ Nil {
			if(@native_ptr <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@native_ptr);
				@lib_proxy := QWidget->GetDllProxy();
				@lib_proxy->CallFunction("qt_app_delete", array_args);
			};
		}
	}
}


use API;
use Struct;

bundle Apache {
	class Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("/tmp/lib/apache");
			};

			return @lib_proxy;
		}
	}
	
	#~
	# Apache Request 
	~#
	class Request {
		@native_request : Int;
		
		New() {
		}

		method : public : Print(s : String) ~ Nil {
      if(@native_request <> 0) {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New(@native_request);
        array_args[1] := s;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("apache_write", array_args);
      };
    }

		method : public : GetUri() ~ String {
      if(@native_request <> 0) {
				array_args := Base->New[2];
        array_args[0] := IntHolder->New(@native_request);
				array_args[1] := IntHolder->New();

        @lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("apache_get_uri", array_args);

				value := array_args[1]->As(String);
				return value;
			};

			return "";
		}

		method : public : GetParams() ~ String {
      if(@native_request <> 0) {
				array_args := Base->New[2];
        array_args[0] := IntHolder->New(@native_request);
				array_args[1] := IntHolder->New();

        @lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("apache_get_args", array_args);

				value := array_args[1]->As(String);
				return value;
			};

			return "";
		}
		
		method : public : GetProtocol() ~ String {
      if(@native_request <> 0) {
				array_args := Base->New[2];
        array_args[0] := IntHolder->New(@native_request);
				array_args[1] := IntHolder->New();

        @lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("apache_get_protocol", array_args);

				value := array_args[1]->As(String);
				return value;
			};

			return "";
		}
	}
}

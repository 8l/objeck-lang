# use Collection;
use System.API;

bundle Gtk2 {
	# signals
	enum Signal := -100 {
		Delete,
		Destroy,
		Clicked
	}
 
	# callback method holder
	class CallbackHolder {
		@callback : (GtkWidget) ~ Nil;

		New(callback : (GtkWidget) ~ Nil) {
			@callback := callback;
		}

		method : public : Get() ~ (GtkWidget) ~ Nil {
			return @callback;
		}
	}

	# GtkWidget class
	class GtkWidget {
		@native_ptr : Int;
		@lib_proxy : static : DllProxy;

		New() {
		}

		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("lib/gtk2/gtk2_objk");
			};

			return @lib_proxy;
		}
		
		method : public : SignalHandlerDisconnect(id : Int) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(@native_ptr);
			array_args[1] := IntHolder->New(id);
			lib_proxy->CallFunction("og_signal_handler_disconnect", array_args);
		}

		method : public : SignalConnect(signal : Signal, callback : (GtkWidget) ~ Nil) ~ Int {
			lib_proxy := GetDllProxy();
			array_args := Base->New[4];
			array_args[0] := IntHolder->New();
			array_args[1] := @self;
			array_args[2] := IntHolder->New(signal->As(Int));
			array_args[3] := CallbackHolder->New(callback);
			lib_proxy->CallFunction("og_signal_connect", array_args);
			# get return value
			id := array_args[0]->As(IntHolder);
			return id->Get();
		}
		
		method : public : SignalConnectSwapped(signal : Signal, widget : GtkWidget, 
				callback : (GtkWidget) ~ Nil) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[4];
			array_args[0] := @self;
			array_args[1] := widget;
			array_args[2] := IntHolder->New(signal->As(Int));
			array_args[3] := CallbackHolder->New(callback);
			lib_proxy->CallFunction("og_signal_connect_swapped", array_args);
		}

		method : public : Show() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := IntHolder->New(@native_ptr);
			lib_proxy->CallFunction("og_widget_show", array_args);
		}

		method : public : Hide() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := IntHolder->New(@native_ptr);
			lib_proxy->CallFunction("og_widget_hide", array_args);
		}
	}
	
	# GtkContainer class
	class GtkContainer from GtkWidget {
		New() {
			Parent();
		}

		method : public : SetBorderWidth(width : Int) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(@native_ptr);
			array_args[1] := IntHolder->New(width);
			lib_proxy->CallFunction("og_container_set_border_width", array_args);
		}
		
		method : public : GetBorderWidth() ~ Int {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(@native_ptr);
			array_args[1] := IntHolder->New();
			lib_proxy->CallFunction("og_container_get_border_width", array_args);
			width := array_args[1]->As(IntHolder);
			return width->Get();
		}
		
		method : public : Add(widget : GtkWidget) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(@native_ptr);
			array_args[1] := widget;
			lib_proxy->CallFunction("og_container_add", array_args);
		}

		method : public : Remove(widget : GtkWidget) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(@native_ptr);
			array_args[1] := widget;
			lib_proxy->CallFunction("og_container_remove", array_args);
		}
	}
	
	# GtkHBox class
	class GtkBox from GtkContainer {
		New() { Parent(); }
		method : public : PackStart(child : GtkWidget, expand : Bool, fill : Bool, padding : Int) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[5];
			array_args[0] := @self;
			array_args[1] := child;
			array_args[2] := IntHolder->New(expand ? 1 : 0);
			array_args[3] := IntHolder->New(fill ? 1 : 0);
			array_args[4] := IntHolder->New(padding);
			lib_proxy->CallFunction("og_gtk_box_pack_start", array_args);
		}
	}

	# GtkHBox class
	class GtkHBox from GtkBox {
		New(homo : Bool, spacing : Int) {
			Parent();
			lib_proxy := GetDllProxy();
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(homo ? 1 : 0);
			array_args[2] := IntHolder->New(spacing);
			lib_proxy->CallFunction("og_gtk_hbox_new", array_args);
			ptr_holder := array_args[0]->As(IntHolder);
			@native_ptr := ptr_holder->Get();
		}		
	}
	
	# GtkButton class
	class GtkButton from GtkContainer {
		New(name : String) {
			Parent();
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := name;
			lib_proxy->CallFunction("og_button_new_with_label", array_args);
			ptr_holder := array_args[0]->As(IntHolder);
			@native_ptr := ptr_holder->Get();

			SignalConnect(Signal->Clicked, ButtonHandle(GtkWidget) ~ Nil);
		}

		function : ButtonHandle(widget : GtkWidget) ~ Nil {
			button : GtkButton := widget;
			button->Clicked();
		}

		method : virtual : public : Clicked() ~ Nil;
	}	

	# GtkWindow class
	class GtkWindow from GtkContainer {
		New() {
			Parent();
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();
			lib_proxy->CallFunction("og_window_new", array_args);
			ptr_holder := array_args[0]->As(IntHolder);
			@native_ptr := ptr_holder->Get();
		}

		method : public : SetTitle(title : String) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(@native_ptr);
			array_args[1] := title;
			lib_proxy->CallFunction("og_window_set_title", array_args);
		}
	}

	# Events class
	class Events {
		function : DeleteEvent(widget : GtkWidget) ~ Nil {
			lib_proxy := GtkWidget->GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := widget;
			lib_proxy->CallFunction("og_widget_destroy", array_args);
		}
	}

	# Appliction class
	class Appliction {
		function : Main() ~ Nil {
			lib_proxy := GtkWidget->GetDllProxy();
			lib_proxy->CallFunction("og_main", Nil->As(Base[]));
		}

		function : MainQuit() ~ Nil {
			lib_proxy := GtkWidget->GetDllProxy();
			lib_proxy->CallFunction("og_main_quit", Nil->As(Base[]));
		}
	}
}


use System.API;

bundle Gtk2 {
	# supporting classes
	class CallbackHolder {
		@callback : (GtkWidget, Base) ~ Nil;

		New(callback : (GtkWidget, Base) ~ Nil) {
			@callback := callback;
		}

		method : public : Get() ~ (GtkWidget, Base) ~ Nil {
			return @callback;
		}
	}

	class GtkRequisition {
		@width : Int;
		@height : Int;
		
		New() {}
		
		New(width : Int, height : Int) {
			@width := width;
			@height := height;				
		}

		method : public : GetWidth() ~ Int {
			return @width;
		}

		method : public : GetHeight() ~ Int {
			return @height;
		}

		method : public : SetWidth(width : Int) ~ Nil {
			@width := width;
		}

		method : public : SetHeight(height : Int) ~ Nil {
			@height := height;
		}
	}

	class GClosure {
		@in_marshal : Int;
		@is_invalid : Int;

		New() {
			@in_marshal := 1;
			@is_invalid := 1;
		}

		method : public : GetInMarshal() ~ Int {
			return @in_marshal;
		}

		method : public : SetInMarshal(in_marshal : Int) ~ Nil {
			@in_marshal := in_marshal;
		}
		
		method : public : IsInvalid() ~ Int {
			return @is_invalid;
		}

		method : public : SetIsInvalid(is_invalid : Int) ~ Nil {
			@is_invalid := is_invalid;
		}
	}

	# TODO:
	class GtkAccelGroupEntry {
		@native_ptr : Int;
		@lib_proxy : static : DllProxy;
		
		New() {}
	}	
	
	# TODO:
	class GList {
		@native_ptr : Int;
		@lib_proxy : static : DllProxy;
		
		New() {}
	}

	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	# GdkRegion class
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
	class GdkRegion {
		@native_ptr : Int;
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("lib/gtk2/gtk2_objk");
			};

			return @lib_proxy;
		}

		New() {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gdk_region_new", array_args);
		}
	}
			
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	# GtkAccelGroup class
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
	class GtkAccelGroup {
		@native_ptr : Int;
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("lib/gtk2/gtk2_objk");
			};

			return @lib_proxy;
		}

		New() {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_accel_group_new", array_args);
		}
		
		method : public : AccelGroupGetModifierMask() ~ Int {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := @self;
			lib_proxy->CallFunction("og_gtk_accel_group_get_modifier_mask", array_args);
			
			return_arg := array_args[0]->As(IntHolder);
			return return_arg->Get();
		}
		
		method : public : AccelGroupLock() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_accel_group_lock", array_args);
		}

		method : public : AccelGroupUnlock() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_accel_group_unlock", array_args);
		}
		
		method : public : AccelGroupConnect(param_1 : Int, param_2 : Int, 
				param_3 : Int, param_4 : GClosure) ~ Nil {
			if(param_4 <> Nil) {
				lib_proxy := GetDllProxy();
				array_args := Base->New[5];
				array_args[0] := @self;
				array_args[1] := IntHolder->New(param_1);
				array_args[2] := IntHolder->New();
				array_args[3] := IntHolder->New();
				array_args[4] := param_4;
				lib_proxy->CallFunction("og_gtk_accel_group_connect", array_args);
			};
		}
		
		method : public : AccelGroupConnectByPath(param_1 : String, param_2 : GClosure) ~ Nil {
			if(param_2 <> Nil) {		
				lib_proxy := GetDllProxy();
				array_args := Base->New[3];
				array_args[0] := @self;
				array_args[1] := param_1;
				array_args[2] := param_2;
				lib_proxy->CallFunction("og_gtk_accel_group_connect_by_path", array_args);
			};
		}

		method : public : AccelGroupQuery(param_2 : Int, param_3 : Int, param_4 : Int) ~ GtkAccelGroupEntry {
			lib_proxy := GetDllProxy();
			array_args := Base->New[5];
			array_args[0] := GtkAccelGroupEntry->New();
			array_args[1] := @self;
			array_args[2] := IntHolder->New(param_2);
			array_args[3] := IntHolder->New(param_3);
			array_args[4] := IntHolder->New(param_4);
			lib_proxy->CallFunction("og_gtk_accel_group_query", array_args);

			return array_args[0]->As(GtkAccelGroupEntry);
		}

		method : public : WidgetReparent(param_1 : GtkWidget) ~ Nil {
			if(param_1 <> Nil) {
				lib_proxy := GetDllProxy();
				array_args := Base->New[2];
				array_args[0] := @self;
				array_args[1] := param_1;
				lib_proxy->CallFunction("og_gtk_widget_reparent", array_args);
			};
		}

		method : public : WidgetRegionIntersect(param_2 : GdkRegion) ~ GdkRegion {
			if(param_2 <> Nil) {
				lib_proxy := GetDllProxy();
				array_args := Base->New[3];
				array_args[0] := GdkRegion->New();
				array_args[1] := @self;
				array_args[2] := param_2;
				lib_proxy->CallFunction("og_gtk_widget_region_intersect", array_args);

				return array_args[0]->As(GdkRegion);
			};

			return Nil;
		}

		method : public : WidgetFreezeChildNotify() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_freeze_child_notify", array_args);
		}
		
		method : public : WidgetChildNotify(param_1 : String) ~ Nil {
			if(param_1 <> Nil) {
				lib_proxy := GetDllProxy();
				array_args := Base->New[2];
				array_args[0] := @self;
				array_args[1] := param_1;
				lib_proxy->CallFunction("og_gtk_widget_child_notify", array_args);
			};
		}
		
		method : public : WidgetThawChildNotify() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_thaw_child_notify", array_args);
		}

		method : public : WidgetGrabFocus() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_grab_focus", array_args);
		}
	}
	
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	# GtkWidget class
	# TODO: error handling
	# TODO: map events and signals
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
	class GtkWidget {
		@native_ptr : Int;
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("lib/gtk2/gtk2_objk");
			};

			return @lib_proxy;
		}

		New() {}		
		
		method : public : SignalHandlerDisconnect(id : Int) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(@native_ptr);	# pointer
			array_args[1] := IntHolder->New(id); # widget id
			lib_proxy->CallFunction("og_signal_handler_disconnect", array_args);
		}

		method : public : SignalConnect(name : String, callback : (GtkWidget, Base) ~ Nil, params : Base) ~ Int {
			if(name <> Nil) {
				lib_proxy := GetDllProxy();
				array_args := Base->New[5];
				array_args[0] := IntHolder->New(); # signal id
				array_args[1] := @self;	# widget
				array_args[2] := name; # name
				array_args[3] := CallbackHolder->New(callback);	# function
				array_args[4] := params; # function params
				lib_proxy->CallFunction("og_signal_connect", array_args);
				
				# get return value
				id := array_args[0]->As(IntHolder);
				return id->Get();
			};

			return -1;
		}
		
		method : public : WidgetDestroy() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_destroy", array_args);
		}

		method : public : WidgetDestroyed(param_1 : GtkWidget) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := @self;
			array_args[1] := param_1;
			lib_proxy->CallFunction("og_gtk_widget_destroyed", array_args);
		}

		method : public : WidgetUnref() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_unref", array_args);
		}

		method : public : WidgetHideAll() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_hide_all", array_args);
		}

		method : public : WidgetUnparent() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_unparent", array_args);
		}

		method : public : WidgetShow() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_show", array_args);
		}

		method : public : WidgetShowNow() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_show_now", array_args);
		}

		method : public : WidgetHide() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_hide", array_args);
		}
		
		method : public : WidgetShowAll() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_show_all", array_args);
		}

		method : public : WidgetSetNoShowAll(param_1 : Bool) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := @self;
			array_args[1] := IntHolder->New(param_1 = false ? 0 : 1);
			lib_proxy->CallFunction("og_gtk_widget_set_no_show_all", array_args);
		}

		method : public : WidgetMap() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_map", array_args);
		}

		method : public : WidgetUnmap() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_unmap", array_args);
		}

		method : public : WidgetRealize() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_realize", array_args);
		}

		method : public : WidgetUnrealize() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_unrealize", array_args);
		}

		method : public : WidgetQueueDraw() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_queue_draw", array_args);
		}

		method : public : WidgetQueueDrawArea(param_1 : Int, param_2 : Int, param_3 : Int, param_4 : Int) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[5];
			array_args[0] := @self;
			array_args[1] := IntHolder->New(param_1);
			array_args[2] := IntHolder->New(param_2);
			array_args[3] := IntHolder->New(param_3);
			array_args[4] := IntHolder->New(param_4);
			lib_proxy->CallFunction("og_gtk_widget_queue_draw_area", array_args);
		}

		method : public : WidgetQueueClearArea(param_1 : Int, param_2 : Int, param_3 : Int, param_4 : Int) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[5];
			array_args[0] := @self;
			array_args[1] := IntHolder->New(param_1);
			array_args[2] := IntHolder->New(param_2);
			array_args[3] := IntHolder->New(param_3);
			array_args[4] := IntHolder->New(param_4);
			lib_proxy->CallFunction("og_gtk_widget_queue_clear_area", array_args);
		}

		method : public : WidgetQueueResize() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_queue_resize", array_args);
		}

		method : public : WidgetQueueResizeNoRedraw() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_queue_resize_no_redraw", array_args);
		}

		method : public : WidgetSizeRequest(param_1 : GtkRequisition) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := @self;
			array_args[1] := param_1;
			lib_proxy->CallFunction("og_gtk_widget_size_request", array_args);
		}

		method : public : WidgetAddAccelerator(param_1 : String, param_2 : Int, param_3 : Int, param_4 : Int, param_5 : Int) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[6];
			array_args[0] := @self;
			array_args[1] := param_1;
			array_args[2] := IntHolder->New(param_2);
			array_args[3] := IntHolder->New(param_3);
			array_args[4] := IntHolder->New(param_4);
			array_args[5] := IntHolder->New(param_5);
			lib_proxy->CallFunction("og_gtk_widget_add_accelerator", array_args);
		}

		method : public : WidgetSetAccelPath(param_1 : String, param_2 : GtkAccelGroup) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[3];
			array_args[0] := @self;
			array_args[1] := param_1;
			array_args[2] := param_2;
			lib_proxy->CallFunction("og_gtk_widget_set_accel_path", array_args);
		}

		method : public : WidgetSetCanFocus(param_1 : Bool) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := @self;
			array_args[1] := IntHolder->New(param_1 = false ? 0 : 1);
			lib_proxy->CallFunction("og_gtk_widget_set_can_focus", array_args);
		}

		method : public : WidgetGrabFocus() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := @self;
			lib_proxy->CallFunction("og_gtk_widget_grab_focus", array_args);
		}
	}
	
	# GtkContainer class
	class GtkContainer from GtkWidget {
		New() { Parent(); }
		
		method : public : SetBorderWidth(width : Int) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(@native_ptr);
			array_args[1] := IntHolder->New(width);
			lib_proxy->CallFunction("og_container_set_border_width", array_args);
		}
		
		method : public : GetBorderWidth() ~ Int {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(@native_ptr);
			array_args[1] := IntHolder->New();
			lib_proxy->CallFunction("og_container_get_border_width", array_args);
			width := array_args[1]->As(IntHolder);
			return width->Get();
		}
		
		method : public : Add(widget : GtkWidget) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(@native_ptr);
			array_args[1] := widget;
			lib_proxy->CallFunction("og_container_add", array_args);
		}

		method : public : Remove(widget : GtkWidget) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(@native_ptr);
			array_args[1] := widget;
			lib_proxy->CallFunction("og_container_remove", array_args);
		}
	}
	
	# GtkBox class
	class GtkBox from GtkContainer {
		New() { Parent(); }
		
		method : public : PackStart(child : GtkWidget, expand : Bool, fill : Bool, padding : Int) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[5];
			array_args[0] := @self;
			array_args[1] := child;
			array_args[2] := IntHolder->New(expand ? 1 : 0);
			array_args[3] := IntHolder->New(fill ? 1 : 0);
			array_args[4] := IntHolder->New(padding);
			lib_proxy->CallFunction("og_gtk_box_pack_start", array_args);
		}
	}

	# GtkHBox class
	class GtkHBox from GtkBox {
		New(homo : Bool, spacing : Int) {
			Parent();
			lib_proxy := GetDllProxy();
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(homo ? 1 : 0);
			array_args[2] := IntHolder->New(spacing);
			lib_proxy->CallFunction("og_gtk_hbox_new", array_args);
			ptr_holder := array_args[0]->As(IntHolder);
			@native_ptr := ptr_holder->Get();
		}		
	}
	
	# GtkButton class
	class GtkButton from GtkContainer {
		New(name : String) {
			Parent();
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := name;
			lib_proxy->CallFunction("og_button_new_with_label", array_args);
			ptr_holder := array_args[0]->As(IntHolder);
			@native_ptr := ptr_holder->Get();
		}

		method : public : GetLabel() ~ String {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[1] := IntHolder->New(@native_ptr);
			lib_proxy->CallFunction("og_button_get_label", array_args);
			return array_args[0]->As(String);
		}
	}	

	# GtkWindow class
	class GtkWindow from GtkContainer {
		New() {
			Parent();
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();
			lib_proxy->CallFunction("og_window_new", array_args);
			ptr_holder := array_args[0]->As(IntHolder);
			@native_ptr := ptr_holder->Get();
		}

		method : public : SetTitle(title : String) ~ Nil {
			if(title <> Nil) {
				lib_proxy := GetDllProxy();
				array_args := Base->New[2];
				array_args[0] := IntHolder->New(@native_ptr);
				array_args[1] := title;
				lib_proxy->CallFunction("og_window_set_title", array_args);
			};
		}
	}

	# Events class
	class Events {
		function : DeleteEvent(widget : GtkWidget) ~ Nil {
			if(widget <> Nil) {
				lib_proxy := GtkWidget->GetDllProxy();
				array_args := Base->New[1];
				array_args[0] := widget;
				lib_proxy->CallFunction("og_widget_destroy", array_args);
			};
		}
	}

	# Appliction class
	class Appliction {
		function : Main() ~ Nil {
			lib_proxy := GtkWidget->GetDllProxy();
			lib_proxy->CallFunction("og_main", Nil->As(Base[]));
		}

		function : MainQuit() ~ Nil {
			lib_proxy := GtkWidget->GetDllProxy();
			lib_proxy->CallFunction("og_main_quit", Nil->As(Base[]));
		}
	}
}


use Collection;
use System.API;

bundle Encryption {
	class Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("lib/openssl/openssl");
			};

			return @lib_proxy;
		}
	}
	
	#~
	# Hash class
	~#
	class Hash {
		function : SHA256(input : Byte[]) ~ Byte[] {
			if(input <> Nil) {
				array_args := Base->New[2];
				array_args[0] := ByteArrayHolder->New(Nil->As(Byte[]));
				array_args[1] := ByteArrayHolder->New(input);				
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("openssl_hash_sha256", array_args);
				
				holder := array_args[0]->As(ByteArrayHolder);
				return holder->Get();
			};
			
			return Nil;
		}
		
		function : MD5(input : Byte[]) ~ Byte[] {
			if(input <> Nil) {
				array_args := Base->New[2];
				array_args[0] := ByteArrayHolder->New(Nil->As(Byte[]));
				array_args[1] := ByteArrayHolder->New(input);				
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("openssl_hash_md5", array_args);
				
				holder := array_args[0]->As(ByteArrayHolder);
				return holder->Get();
			};
			
			return Nil;
		}
	}
	
	#~
	# Encryption class
	~#
	class Encrypt {
		function : AES256(key : Byte[], input : Byte[]) ~ Byte[] {
			if(key <> Nil & input <> Nil) {
				array_args := Base->New[3];
				array_args[0] := ByteArrayHolder->New(Nil->As(Byte[]));
				array_args[1] := ByteArrayHolder->New(key);
				array_args[2] := ByteArrayHolder->New(input);				
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("openssl_encrypt_aes256", array_args);
				
				holder := array_args[0]->As(ByteArrayHolder);
				return holder->Get();
			};
			
			return Nil;
		}
	}
	
	#~
	# Decryption class
	~#
	class Decrypt {
		function : AES256(key : Byte[], input : Byte[]) ~ Byte[] {
			if(key <> Nil & input <> Nil) {
				array_args := Base->New[3];
				array_args[0] := ByteArrayHolder->New(Nil->As(Byte[]));
				array_args[1] := ByteArrayHolder->New(key);
				array_args[2] := ByteArrayHolder->New(input);				
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("openssl_decrypt_aes256", array_args);
				
				holder := array_args[0]->As(ByteArrayHolder);
				return holder->Get();
			};
			
			return Nil;
		}
	}
}


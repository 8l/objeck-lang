use API;
use Structure;

bundle ODBC {
	class ODBC {
		@lib_proxy : static : DllProxy;
		
		New() {
		}
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("lib/odbc/odbc");
			};

			return @lib_proxy;
		}
	}
	
	class Connection from ODBC {
		@native_connection : Int;
		
		New(ds : String, username : String, password : String) {
			Parent();
			array_args := Base->New[4];
			array_args[0] := IntHolder->New();
			array_args[1] := ds;
			array_args[2] := username;
			array_args[3] := password;
			@lib_proxy := GetDllProxy();
			@lib_proxy->CallFunction("odbc_connect", array_args);
			
			value := array_args[0]->As(IntHolder);
			@native_connection := value->Get();
      	}
      	
      	method : public : Close() ~ Nil {
      		if(@native_connection <> 0) {
      			array_args := Base->New[1];
				array_args[0] := IntHolder->New(@native_connection);
				@lib_proxy := GetDllProxy();
				@lib_proxy->CallFunction("odbc_disconnect", array_args);
      		};
      	}
		
		method : public : CreateUpdateStatement() ~ UpdateStatement {
			return Nil;
		}
	}
	
	class UpdateStatement from ODBC {
		@connection : Connection;
		
		New(connection : Connection) {
			Parent();
			@connection := connection;
		}
		
		method : public : Update(sql : String) ~ Int {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := @connection;
			array_args[2] := sql;
			@lib_proxy := GetDllProxy();
			@lib_proxy->CallFunction("odbc_update_statement", array_args);
			
			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
	}
}


use Collection;
use System.API;
#~
Provides basic data access support
~#
bundle ODBC {
	class Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("../lib/objeck-lang/libobjk_odbc");
			};

			return @lib_proxy;
		}
	}
	
	#~
	ODBC database connection
	~#
	class Connection {
		@native_connection : Int;
		
		#~
		Constructor 
		@param username ODBC connection name
		@param password ODBC connection password
		~#
		New(ds : String, username : String, password : String) {
			Parent();
			array_args := Base->New[4];
			array_args[0] := IntHolder->New();
			array_args[1] := ds;
			array_args[2] := username;
			array_args[3] := password;
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("odbc_connect", array_args);
			
			value := array_args[0]->As(IntHolder);
			@native_connection := value->Get();
		}
      	
		#~
		Check rather a connect is open
		@return true if connected, false otherwise
		~#
		method : public : IsOpen() ~ Bool {
			return @native_connection <> 0;
		}
		
		#~
		Closes a connection
		~#
		method : public : Close() ~ Nil {
			if(@native_connection <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@native_connection);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_disconnect", array_args);
			};
		}
		
		#~
		Executes a SQL update statement
		@param sql SQL statement
		@return result code
		~#
		method : public : Update(sql : String) ~ Int {
			if(@native_connection <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@native_connection);
				array_args[2] := sql;
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_update_statement", array_args);
				
				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		#~
		Executes a SQL select statement
		@param sql SQL statement
		@return result set
		~#
		method : public : Select(sql : String) ~ ResultSet {
			if(@native_connection <> 0) {
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New();
				array_args[2] := IntHolder->New();
				array_args[3] := IntHolder->New(@native_connection);
				array_args[4] := sql;
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_select_statement", array_args);
				
				native_stmt := array_args[0]->As(IntHolder);
				native_names := array_args[1]->As(IntHolder);
				exec_data := array_args[2]->As(IntHolder);
				return ResultSet->New(native_stmt->Get(), native_names->Get(), exec_data->Get());
			};
			
			return Nil;
		}
		
		#~
		Create a parametrized SQL statement 
		@param sql SQL statement
		@return result set
		~#
		method : public : CreateParameterStatement(sql : String) ~ ParameterStatement {
			if(@native_connection <> 0) {
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New();
				array_args[2] := IntHolder->New();
				array_args[3] := IntHolder->New(@native_connection);
				array_args[4] := sql;
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_pepare_statement", array_args);
				
				native_stmt := array_args[0]->As(IntHolder);
				native_names := array_args[1]->As(IntHolder);
				exec_data := array_args[2]->As(IntHolder);
				return ParameterStatement->New(native_stmt->Get(), native_names->Get(), exec_data->Get());
			};
			
			return Nil;
		}
	}
	
	#~
	ODBC parametrized statement that supports SQL variables
	~#
	class ParameterStatement {
		@native_stmt : Int;
		@native_names : Int;
		@exec_data : Int;
		@params : Vector;
		
		New(native_stmt : Int, native_names : Int, exec_data : Int) {
			@native_stmt := native_stmt;
			@native_names := native_names;
			@exec_data := exec_data;
			@params := Vector->New();
		}
		
		#~
		Sets a bit type
		@param pos parameter position
		@param value bit value
		@return true if set, false otherwise
		~#
		method : public : SetBit(pos : Int, value : Bool) ~ Bool {
			if(@native_stmt <> 0 & @native_names <> 0) {
				in := IntHolder->New(value ? 1 : 0);
				@params->AddBack(in);
				
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := in;
				array_args[2] := IntHolder->New(pos);
				array_args[3] := IntHolder->New(@native_stmt);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_stmt_set_bit", array_args);
				
				status := array_args[0]->As(IntHolder);
				return status->Get() = 1;
			};
			
			return false;
		}
		
		#~
		Sets a small integer type
		@param pos parameter position
		@param value small integer value
		@return true if set, false otherwise
		~#
		method : public : SetSmallInt(pos : Int, value : Int) ~ Bool {
			if(@native_stmt <> 0 & @native_names <> 0) {
				in := IntHolder->New(value);
				@params->AddBack(in);
				
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := in;
				array_args[2] := IntHolder->New(pos);
				array_args[3] := IntHolder->New(@native_stmt);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_stmt_set_smallint", array_args);
				
				status := array_args[0]->As(IntHolder);
				return status->Get() = 1;
			};
			
			return false;
		}
		
		#~
		Sets a integer type
		@param pos parameter position
		@param value integer value
		@return true if set, false otherwise
		~#
		method : public : SetInt(pos : Int, value : Int) ~ Bool {
			if(@native_stmt <> 0 & @native_names <> 0) {
				in := IntHolder->New(value);
				@params->AddBack(in);
				
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := in;
				array_args[2] := IntHolder->New(pos);
				array_args[3] := IntHolder->New(@native_stmt);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_stmt_set_int", array_args);
				
				status := array_args[0]->As(IntHolder);
				return status->Get() = 1;
			};
			
			return false;
		}
		
		#~
		Sets a double type
		@param pos parameter position
		@param value double value
		@return true if set, false otherwise
		~#
		method : public : SetDouble(pos : Int, value : Float) ~ Bool {
			if(@native_stmt <> 0 & @native_names <> 0) {
				in := FloatHolder->New(value);
				@params->AddBack(in);
				
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := in;
				array_args[2] := IntHolder->New(pos);
				array_args[3] := IntHolder->New(@native_stmt);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_stmt_set_double", array_args);
				
				status := array_args[0]->As(IntHolder);
				return status->Get() = 1;
			};
			
			return false;
		}
		
		#~
		Sets a real type
		@param pos parameter position
		@param value real value
		@return true if set, false otherwise
		~#
		method : public : SetReal(pos : Int, value : Float) ~ Bool {
			if(@native_stmt <> 0 & @native_names <> 0) {
				in := FloatHolder->New(value);
				@params->AddBack(in);
				
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := in;
				array_args[2] := IntHolder->New(pos);
				array_args[3] := IntHolder->New(@native_stmt);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_stmt_set_real", array_args);
				
				status := array_args[0]->As(IntHolder);
				return status->Get() = 1;
			};
			
			return false;
		}

		#~
		Sets varchar type
		@param pos parameter position
		@param value string value
		@return true if set, false otherwise
		~#
		method : public : SetVarchar(pos : Int, value : String) ~ Bool {		
			if(@native_stmt <> 0 & @native_names <> 0) {
				in := ByteArrayHolder->New(value->ToByteArray());
				@params->AddBack(in);
				
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := in;
				array_args[2] := IntHolder->New(pos);
				array_args[3] := IntHolder->New(@native_stmt);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_stmt_set_varchar", array_args);
				
				status := array_args[0]->As(IntHolder);
				return status->Get() = 1;
			};
			
			return false;
		}
		
		#~
		Sets a blob type
		@param pos parameter position
		@param buffer byte buffer
		@return true if set, false otherwise
		~#
		method : public : SetBlob(pos : Int, buffer : Byte[]) ~ Bool {		
			if(@native_stmt <> 0 & @native_names <> 0) {
				in := ByteArrayHolder->New(buffer);
				@params->AddBack(in);
				
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := in;
				array_args[2] := IntHolder->New(pos);
				array_args[3] := IntHolder->New(@native_stmt);
				array_args[4] := IntHolder->New(@exec_data);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_stmt_set_blob", array_args);
				
				status := array_args[0]->As(IntHolder);
				return status->Get() = 1;
			};
			
			return false;
		}
		
		method : public : SetBytes(pos : Int, buffer : Byte[]) ~ Bool {			
			return SetBytes(pos, buffer, buffer->Size());
		}
		
		#~
		Sets a stream of bytes
		@param pos parameter position
		@param buffer byte buffer
		@param length number of bytes to write
		@return true if set, false otherwise
		~#
		method : public : SetBytes(pos : Int, buffer : Byte[], length : Int) ~ Bool {		
			if(@native_stmt <> 0 & @native_names <> 0) {
				if(length > buffer->Size()) {
					length := buffer->Size();
				};

				in := ByteArrayHolder->New(buffer);
				@params->AddBack(in);
				
				array_args := Base->New[6];
				array_args[0] := IntHolder->New();
				array_args[1] := in;
				array_args[2] := IntHolder->New(length);
				array_args[3] := IntHolder->New(pos);
				array_args[4] := IntHolder->New(@native_stmt);
				array_args[5] := IntHolder->New(@exec_data);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_stmt_set_bytes", array_args);
				
				status := array_args[0]->As(IntHolder);
				return status->Get() = 1;
			};
			
			return false;
		}
		
		#~
		Sets a date type
		@param pos parameter position
		@param value date value
		@return true if set, false otherwise
		~#
		method : public : SetDate(pos : Int, value : Date) ~ Bool {		
			if(@native_stmt <> 0 & @native_names <> 0) {
				@params->AddBack(value);

				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := value;
				array_args[2] := IntHolder->New(pos);
				array_args[3] := IntHolder->New(@native_stmt);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_stmt_set_date", array_args);
				
				status := array_args[0]->As(IntHolder);
				return status->Get() = 1;
			};
			
			return false;
		}
		
		#~
		Sets a timestamp type
		@param pos parameter position
		@param value timestamp value
		@return true if set, false otherwise
		~#
		method : public : SetTimestamp(pos : Int, value : Timestamp) ~ Bool {		
			if(@native_stmt <> 0 & @native_names <> 0) {
				@params->AddBack(value);

				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := value;
				array_args[2] := IntHolder->New(pos);
				array_args[3] := IntHolder->New(@native_stmt);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_stmt_set_timestamp", array_args);
				
				status := array_args[0]->As(IntHolder);
				return status->Get() = 1;
			};
			
			return false;
		}
		
		#~
		Executes a SQL update statement
		@param sql SQL statement
		@return result code
		~#
		method : public : Update() ~ Int {
			if(@native_stmt <> 0 & @native_names <> 0) {
      			array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@native_stmt);
				array_args[2] := IntHolder->New(@exec_data);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_stmt_update", array_args);
				@params->Empty();

				value := array_args[0]->As(IntHolder);
				return value->Get();
      		};
      		
      		return -1;
		}
		
		#~
		Executes a SQL select statement
		@param sql SQL statement
		@return result set
		~#
		method : public : Select() ~ ResultSet {
			if(@native_stmt <> 0 & @native_names <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@native_stmt);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_stmt_select_statement", array_args);
				@params->Empty();
				
				return ResultSet->New(@native_stmt, @native_names, @exec_data);
			};
			
			return Nil;
		}
		
		#~
		Closes the statement
		~#
		method : public : Close() ~ Nil {
			if(@native_stmt <> 0 & @native_names <> 0) {
      			array_args := Base->New[1];
				array_args[0] := IntHolder->New(@native_stmt);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_stmt_close", array_args);
				@params->Empty();
      			};
      		}
	}
	
	#~
	ODBC result set
	~#
	class ResultSet {
		@native_stmt : Int;
		@native_names : Int;
		@exec_data : Int;
		@is_null : Bool;
		
		New(native_stmt : Int, native_names : Int, exec_data : Int) {
			@native_stmt := native_stmt;
			@native_names := native_names;
			@exec_data := exec_data;
		}
		
		#~
		Moves the cursor to the next row in the result set
		@return true if cursor was moved, false otherwise
		~#
		method : public : Next() ~ Bool {
			if(@native_stmt <> 0 & @native_names <> 0) {
      			array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@native_stmt);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_result_next", array_args);
				
				value := array_args[0]->As(IntHolder);
				return value->Get() = 1;
      		};
      		
      		return false;
		}
		
		#~
		Checks to see if the value fetched is NUL. This method should be called
		after a value is fetched using GetX(column).
		@return true if NIL, false otherwise
		~#
		method : public : IsNull() ~ Bool {
			return @is_null;
		}
		
		#~
		Gets an integer value
		@param column column ID
		@return integer value
		~#
		method : public : GetInt(column : Int) ~ Int {
			if(@native_stmt <> 0 & @native_names <> 0) {
      			array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New();
				array_args[2] := IntHolder->New(column);
				array_args[3] := IntHolder->New(@native_stmt);
				array_args[4] := IntHolder->New(@native_names);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_result_get_int_by_id", array_args);
				
				is_null := array_args[0]->As(IntHolder);
				@is_null := is_null->Get() = 1;
				
				value := array_args[1]->As(IntHolder);
				return value->Get();
      		};
      		
      		return 0;
		}
		
		#~
		Gets a small integer value
		@param column column ID
		@return small integer value
		~#
		method : public : GetSmallInt(column : Int) ~ Int {
			if(@native_stmt <> 0 & @native_names <> 0) {
      			array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New();
				array_args[2] := IntHolder->New(column);
				array_args[3] := IntHolder->New(@native_stmt);
				array_args[4] := IntHolder->New(@native_names);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_result_get_smallint_by_id", array_args);
				
				is_null := array_args[0]->As(IntHolder);
				@is_null := is_null->Get() = 1;
				
				value := array_args[1]->As(IntHolder);
				return value->Get();
      		};
      		
      		return 0;
		}
		
		#~
		Gets a bit value
		@param column column ID
		@return bit value
		~#
		method : public : GetBit(column : Int) ~ Bool {
			if(@native_stmt <> 0 & @native_names <> 0) {
      			array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New();
				array_args[2] := IntHolder->New(column);
				array_args[3] := IntHolder->New(@native_stmt);
				array_args[4] := IntHolder->New(@native_names);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_result_get_bit_by_id", array_args);
				
				is_null := array_args[0]->As(IntHolder);
				@is_null := is_null->Get() = 1;
				
				value := array_args[1]->As(IntHolder);
				return value->Get() = 1;
      		};
      		
      		return false;
		}
		
		#~
		Gets a double value
		@param column column ID
		@return double value
		~#
		method : public : GetDouble(column : Int) ~ Float {
			if(@native_stmt <> 0 & @native_names <> 0) {
      			array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := FloatHolder->New();
				array_args[2] := IntHolder->New(column);
				array_args[3] := IntHolder->New(@native_stmt);
				array_args[4] := IntHolder->New(@native_names);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_result_get_double_by_id", array_args);
				
				is_null := array_args[0]->As(IntHolder);
				@is_null := is_null->Get() = 1;
				
				value := array_args[1]->As(FloatHolder);
				return value->Get();
      		};
      		
      		return 0.0;
		}
		
		#~
		Gets a real value
		@param column column ID
		@return real value
		~#
		method : public : GetReal(column : Int) ~ Float {
			if(@native_stmt <> 0 & @native_names <> 0) {
      			array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := FloatHolder->New();
				array_args[2] := IntHolder->New(column);
				array_args[3] := IntHolder->New(@native_stmt);
				array_args[4] := IntHolder->New(@native_names);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_result_get_real_by_id", array_args);
				
				is_null := array_args[0]->As(IntHolder);
				@is_null := is_null->Get() = 1;
				
				value := array_args[1]->As(FloatHolder);
				return value->Get();
      		};
      		
      		return 0.0;
		}
		
		#~
		Gets a varchar value
		@param column column ID
		@return varchar value
		~#
		method : public : GetVarchar(column : Int) ~ String {
			if(@native_stmt <> 0 & @native_names <> 0) {
      			array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New();
				array_args[2] := IntHolder->New(column);
				array_args[3] := IntHolder->New(@native_stmt);
				array_args[4] := IntHolder->New(@native_names);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_result_get_varchar_by_id", array_args);
				
				is_null := array_args[0]->As(IntHolder);
				@is_null := is_null->Get() = 1;
				
				value := array_args[1]->As(String);
				return value;
      		};
      		
      		return "";
		}

		#~
		Gets a blob value
		@param column column ID
		@param buffer buffer to write into
		~#
		method : public : GetBlob(column : Int, buffer : Byte[]) ~ Nil {
			if(@native_stmt <> 0 & @native_names <> 0) {
      			array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := ByteArrayHolder->New(buffer);
				array_args[2] := IntHolder->New(column);
				array_args[3] := IntHolder->New(@native_stmt);
				array_args[4] := IntHolder->New(@native_names);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_result_get_blob_by_id", array_args);
				
				is_null := array_args[0]->As(IntHolder);
				@is_null := is_null->Get() = 1;
      		};
		}
		
#~
		method : public : GetVarchar(name : String) ~ String {
			if(@native_stmt <> 0 & @native_names <> 0) {
      			array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New();
				array_args[2] := name;
				array_args[3] := IntHolder->New(@native_stmt);
				array_args[4] := IntHolder->New(@native_names);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_result_get_varchar_by_name", array_args);
				
				is_null := array_args[0]->As(IntHolder);
				@is_null := is_null->Get() = 1;
				
				value := array_args[1]->As(String);
				return value;
      		};
      		
      		return "";
		}
~#
		#~
		Gets a date value
		@param column column ID
		@return date value
		~#
		method : public : GetDate(column : Int) ~ ODBC.Date {
			if(@native_stmt <> 0 & @native_names <> 0) {
      			array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New();
				array_args[2] := IntHolder->New(column);
				array_args[3] := IntHolder->New(@native_stmt);
				array_args[4] := IntHolder->New(@native_names);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_result_get_date_by_id", array_args);
				
				is_null := array_args[0]->As(IntHolder);
				@is_null := is_null->Get() = 1;
				
				value := array_args[1]->As(ODBC.Date);
				return value;
      		};
      		
      		return Nil;
		}
		
		#~
		Gets a timestamp value
		@param column column ID
		@return timestamp value
		~#
		method : public : GetTimestamp(column : Int) ~ Timestamp {
			if(@native_stmt <> 0 & @native_names <> 0) {
      			array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New();
				array_args[2] := IntHolder->New(column);
				array_args[3] := IntHolder->New(@native_stmt);
				array_args[4] := IntHolder->New(@native_names);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_result_get_timestamp_by_id", array_args);
				
				is_null := array_args[0]->As(IntHolder);
				@is_null := is_null->Get() = 1;
				
				value := array_args[1]->As(Timestamp);
				return value;
      		};
      		
      		return Nil;
		}
		
		#~
		Closes a result set 
		~#
		method : public : Close() ~ Nil {
			if(@native_stmt <> 0 & @native_names <> 0) {
      			array_args := Base->New[2];
				array_args[0] := IntHolder->New(@native_names);
				array_args[1] := IntHolder->New(@exec_data);
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("odbc_result_close", array_args);
      		};
      	}
	}
	
	#~
	ODBC date
	~#
	class Date {
		@buffer : Byte[];
		@year : Int;
		@month : Int;
		@day : Int;
		
		#~
		Default constructor
		~#
		New() {
			# size of c struct
			@buffer := Byte->New[6];
		}
		
		#~
		Gets the year
		@return year
		~#
		method : public : GetYear() ~ Int {
			return @year;
		}

		#~
		Sets the year
		@param year value
		~#
		method : public : SetYear(year : Int) ~ Nil {
			@year := year;
		}
		
		#~
		Gets the month
		@return month
		~#
		method : public : GetMonth() ~ Int {
			return @month;
		}

		#~
		Sets the month
		@param month value
		~#
		method : public : SetMonth(month : Int) ~ Nil {
			@month := month;
		}
		
		#~
		Gets the day
		@return day
		~#
		method : public : GetDay() ~ Int {
			return @day;
		}
		
		#~
		Sets the day
		@param day value
		~#
		method : public : SetDay(day : Int) ~ Nil {
			@day := day;
		}
	}
	
	#~
	# ODBC Timestamp holder
	~#
	class Timestamp {
		@buffer : Byte[];
		@year : Int;
		@month : Int;
		@day : Int;
		@hours : Int;
		@minute : Int;
		@second : Int;
		@fraction : Int;
		
		#~
		Default constructor
		~#
		New() {
			# size of c struct
			@buffer := Byte->New[16];
		}
		
		#~
		Gets the year
		@return year
		~#
		method : public : GetYear() ~ Int {
			return @year;
		}

		#~
		Sets the year
		@param year value
		~#
		method : public : SetYear(year : Int) ~ Nil {
			@year := year;
		}
		
		#~
		Gets the month
		@return month
		~#
		method : public : GetMonth() ~ Int {
			return @month;
		}

		#~
		Sets the month
		@param month value
		~#
		method : public : SetMonth(month : Int) ~ Nil {
			@month := month;
		}
		
		#~
		Gets the day
		@return day
		~#
		method : public : GetDay() ~ Int {
			return @day;
		}
		
		#~
		Sets the day
		@param day value
		~#
		method : public : SetDay(day : Int) ~ Nil {
			@day := day;
		}

		#~
		Gets the hours
		@return hours
		~#
		method : public : GetHours() ~ Int {
			return @hours;
		}
		
		#~
		Sets the hours
		@param day hours
		~#
		method : public : SetHours(hours : Int) ~ Nil {
			@hours := hours;
		}

		#~
		Gets the minutes
		@return minutes
		~#
		method : public : GetMinute() ~ Int {
			return @minute;
		}
		
		#~
		Sets the minutes
		@param day minutes
		~#
		method : public : SetMinute(minute : Int) ~ Nil {
			@minute := minute;
		}

		#~
		Gets the seconds
		@return seconds
		~#
		method : public : GetSeconds() ~ Int {
			return @second;
		}
		
		#~
		Sets the seconds
		@param day seconds
		~#
		method : public : SetSeconds(second : Int) ~ Nil {
			@second := second;
		}

		#~
		Gets the fraction of seconds
		@return fraction of seconds
		~#
		method : public : GetFraction() ~ Int {
			return @fraction;
		}
	}
}


use API;
use Struct;

bundle FastCgi {
	class Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("/tmp/fcgi");
			};

			return @lib_proxy;
		}
	}
	
	#~
	# FastCgi Request 
	~#
	class Request {
		@native_in : Int;
		@native_envp : Int;
		@cookies : StringMap;
		@parameters : StringMap;
		@query : String;
		
		method : public : GetProtocol() ~ String {
			if(@native_envp <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New(@native_envp);

				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("fcgi_get_protocol", array_args);
				value := array_args[1]->As(String);
				return value;
			};
			
			return "";
		}

		method : public : GetClientAddress() ~ String {
			if(@native_envp <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New(@native_envp);

				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("fcgi_get_remote_address", array_args);
				value := array_args[1]->As(String);
				return value;
			};
			
			return "";
		}

		method : public : GetRequestUri() ~ String {
			if(@native_envp <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New(@native_envp);

				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("fcgi_get_request_uri", array_args);
				value := array_args[1]->As(String);
				return value;
			};
			
			return "";
		}

		method : ProcessCookies(string : String) ~ Nil {
			@cookies := StringMap->New();
			name_values := string->Split(";");
			each(i : name_values) {
				name_value := name_values[i]->Split("=");
				if(name_value <> Nil & name_value->Size() = 2) {
					@cookies->Insert(name_value[0]->Trim(), name_value[1]->Trim());
				};
			};
		}
		
		method : public : GetCookie(name : String) ~ String {
			if(@cookies = Nil & @native_envp <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New(@native_envp);

				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("fcgi_get_cookie", array_args);
				ProcessCookies(array_args[1]->As(String));
			};
			
			if(@cookies <> Nil) {
				return @cookies->Find(name)->As(String);
			};

			return Nil;
		}

		method : public : GetQuery() ~ String {
			if(@query <> Nil) {
				return @query;
			};
		
			if(@native_envp <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New(@native_envp);

				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("fcgi_get_query", array_args);
				@query := array_args[1]->As(String);
				
				if(@query <> Nil & @query->Size() > 0) {
					@parameters := StringMap->New();
					name_values := @query->Split("&");
					each(i : name_values) {
						name_value := name_values[i]->Split("=");
						if(name_value->Size() = 2) {
							@parameters->Insert(name_value[0], name_value[1]);
						};
					};
				};
				
				return @query;
			};
			
			return Nil;
		}

		method : public : GetParameter(name : String) ~ String {
			if(@query = Nil | @query->Size() = 0) {
				GetQuery();
			};

			if(@parameters <> Nil) {
				return @parameters->Find(name)->As(String);
			};

			return Nil;
		}
	}

	#~
	# FastCgi Response 
	~#
	class Response {
		@native_out : Int;
		@native_err : Int;
		@cookies : String;
		@body : String;
		
		method : public : AddBody(s : String) ~ Nil {
			if(@body = Nil) {
				@body := String->New();
			};
			@body->Append(s);
		}

		method : public : Submit() ~ Nil {
			WriteRaw("Content-type: text/html\r\nStatus: 200 OK\r\n");
			if(@cookies <> Nil) {
				WriteRaw(@cookies);
			};
			WriteRaw("\r\n");
			
			# TODO: error handle
			if(@body <> Nil) {
				WriteRaw(@body);
			};
		}

		method : public : AddCookie(name : String, value : String) ~ Nil {
			AddCookie(name, value, Nil);
		}
		
		method : public : AddCookie(name : String, value : String, expires : Time.Date) ~ Nil {
			if(@cookies = Nil) {
				@cookies := String->New();
			};
			
			@cookies->Append("Set-Cookie: ");
			@cookies->Append(name);
			@cookies->Append('=');
			@cookies->Append(value);
			if(expires <> Nil) {
				# TODO: implement
			};
			@cookies->Append("\r\n");
		}	
		
		method : WriteRaw(s : String) ~ Nil {
			if(s <> Nil) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New(@native_out);
				array_args[1] := s;
				
				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("fcgi_write", array_args);
			};
		}
	
		method : public : GetFoo() ~ String {
			return "foooooooooooo...........";
		}
	}
}

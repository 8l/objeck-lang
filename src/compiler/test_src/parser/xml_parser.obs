use IO;
use XML;

bundle Default {
	class Test {
		function : Main(args : String[]) ~ Nil {
			if(args->Size() = 1) {
				parser := XmlParser->New(FileReader->ReadFile(args[0]));
				if(parser->Parse()) {
					types := parser->FindElements("mapping/types/type");
					if(types <> Nil) {
						each(i : types) {
							type_element := types->Get(i)->As(XMLElement);
							from_attrib := type_element->GetAttribute("from");
							to_attrib := type_element->GetAttribute("to");
							if(from_attrib <> Nil & to_attrib <> Nil) {
								Console->Print("mapping: ")->Print(from_attrib)->Print(" => ")->PrintLine(to_attrib);
							};
						};
					};
					"------------"->PrintLine();
					
					classes := parser->FindElements("mapping/classes/class");
					if(classes <> Nil) {
						each(i : classes) {
							class_element := classes->Get(i)->As(XMLElement);
							name_attrib := class_element->GetAttribute("name");
							if(name_attrib <> Nil) {
								Console->Print("class: name=")->PrintLine(name_attrib);
							};
							
							methods := class_element->FindElements("class/methods/method");
							each(j : methods) {
								method_element := methods->Get(i)->As(XMLElement);
								name_attrib := method_element->GetAttribute("name");
								if(name_attrib <> Nil) {
									Console->Print("\tmethod: name=")->PrintLine(name_attrib);
								};
								c_funcs := method_element->FindElements("method/c-func");
								if(c_funcs <> Nil & c_funcs->Size() = 1) {
									c_func := c_funcs->Get(0)->As(XMLElement);
									Console->Print("\t\tc-fun: content=")->PrintLine(c_func->GetContent());
								};
							};
						};
					};
				}
				else {
					parser->GetError()->PrintLine();
				};
			};
		}
	}
}


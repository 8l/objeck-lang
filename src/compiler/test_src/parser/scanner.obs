use IO;
use Struct;

# to compile: -lib struct.obl

bundle CodeGen {
	# Token class
	class Token {
		@type : Type;
		@value : String;

		New(type : Type) {
			@type := type;
		}
		
		New(type : Type, value : String) {
			@type := type;
			@value := value;
		}

		method : public : GetType() ~ Type {
			return @type;
		}
		
		method : public : GetValue() ~ String {
			return @value;
		}
	}
	
	# token type
	enum Type := -100 {
		TYPES_ID,
		CLASSES_ID,
		CLASS_ID,
		CHAR_ID,
		INT_ID,
		FLOAT_ID,
		DOUBLE_ID,
		NEW_ID,
		METHOD_ID,
		FUNCTION_ID,
		IDENT,
		HBAR,
		DELIM,
		OPRN,
		CPRN,
		OBR,
		CBR,
		OCBR,
		CCBR,
		SCOLON,
		COMMA,
		COLON,
		MAP,
		UNKWN,
		NUM
	}

	# Scanner class
	class Scanner {
		@filename : String;
		@tokens : Vector;

		New(filename : String) {
			@filename := filename;
			@tokens := Vector->New();
		}

		function : Main(args : String[]) ~ Nil {
			if(args->Size() = 1) {
				tokens := Scanner->New(args[0])->Scan();
				Parser->New(tokens)->Parse();
			};
		}

		method : Scan() ~ Vector {
			reserved := StringMap->New();
			reserved->Insert("TYPES", Token->New(Type->TYPES_ID, "TYPES")->As(Base));
			reserved->Insert("CLASSES", Token->New(Type->CLASSES_ID, "CLASSES")->As(Base));
			reserved->Insert("CLASSES", Token->New(Type->CLASSES_ID, "CLASSES")->As(Base));
			reserved->Insert("Int", Token->New(Type->INT_ID, "Int")->As(Base));
			reserved->Insert("Float", Token->New(Type->FLOAT_ID, "Float")->As(Base));
			reserved->Insert("Char", Token->New(Type->CHAR_ID, "Char")->As(Base));
			reserved->Insert("class", Token->New(Type->CLASS_ID, "class")->As(Base));
			reserved->Insert("method", Token->New(Type->CLASSES_ID, "METHOD_ID")->As(Base));
			reserved->Insert("function", Token->New(Type->FUNCTION_ID, "FUNCTION_ID")->As(Base));
			reserved->Insert("new", Token->New(Type->NEW_ID, "new")->As(Base));
			
			reader := FileReader->New(@filename);
			line_num := 0;
			while(reader->IsEOF() <> true) {
				line := reader->ReadString();
				line_num := line_num + 1;

				i := 0;
				while(i < line->Size()) {
					# skip whitespace
					c := line->Get(i);
					while((c = ' ' | c = '\t' | c = '\r'| c = '\n') & i < line->Size()) {
						i += 1;
						c := line->Get(i);
					};

					# parse
					if(i < line->Size()) {
						# keyword
						if(line->Get(i)->IsChar() = true) {
							ident := "";
							c := line->Get(i);
							while(c->IsChar() | c->IsDigit() | c = '.' | c = '_') {
								ident->Append(line->Get(i));
								i += 1;
								c := line->Get(i);
							};

							result := reserved->Find(ident)->As(Token);
							if(result <> Nil) {
								@tokens->AddBack(result->As(Base));
							}
							else {
								@tokens->AddBack(Token->New(Type->IDENT, ident)->As(Base));
							};
						}
						# number
						else if(line->Get(i)->IsDigit()) {
							number := "";
							c := line->Get(i);
							while(c->IsDigit()) {
								number->Append(line->Get(i));
								i += 1;
								c := line->Get(i);
							};
							@tokens->AddBack(Token->New(Type->NUM, number)->As(Base));
						}
						# other
						else {
							select(line->Get(i)) {
								label '(': {
									@tokens->AddBack(Token->New(Type->OPRN, "(")->As(Base));
								}
								
								label ')': {
									@tokens->AddBack(Token->New(Type->CPRN, ")")->As(Base));
								}

								label '[': {
									@tokens->AddBack(Token->New(Type->OBR, "[")->As(Base));
								}

								label ']': {
									@tokens->AddBack(Token->New(Type->CBR, "]")->As(Base));
								}

								label '=': {
									if(i + 1 < line->Size() & line->Get(i + 1) = '>') {
										@tokens->AddBack(Token->New(Type->MAP, "=>")->As(Base));
										i += 1;
									} 
									else if(i + 1 < line->Size() & line->Get(i + 1) = '=') {
										@tokens->AddBack(Token->New(Type->HBAR, "==")->As(Base));
										i += 1;
									}	
									else {
										@tokens->AddBack(Token->New(Type->UNKWN, "?")->As(Base));
									};
								}

								label '{': {
									@tokens->AddBack(Token->New(Type->OCBR, "{")->As(Base));
								}

								label '}': {
									@tokens->AddBack(Token->New(Type->CCBR, "}")->As(Base));
								}

								label ',': {
									@tokens->AddBack(Token->New(Type->COMMA, ",")->As(Base));
								}
								
								label ';': {
									@tokens->AddBack(Token->New(Type->SCOLON, ";")->As(Base));
								}

								label ':': {
									@tokens->AddBack(Token->New(Type->COLON, ":")->As(Base));
								}
								
								label '|': {
									@tokens->AddBack(Token->New(Type->DELIM, "|")->As(Base));
								}
								
								other: {
									@tokens->AddBack(Token->New(Type->UNKWN, "?")->As(Base));
								}
							};
							# update
							i += 1;
						};
					};
				};
			};
			reader->Close();
			
			return @tokens;
		}
	}
}

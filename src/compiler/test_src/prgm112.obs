bundle Default {
	enum Token := -32 { 
		ZERO_MORE,
		ONE_MORE,
		SEQUENCE,
		ALTERNATION
	}

	class Postfix {
		@input : String;
		@index : Int;
		@char : Char;
		@stack : Int[];
		@sp : Int;

		New(input : String) {
			@input := input;
			@index := 0;
			@stack := Int->New[256];
			@sp := 0;
		}

		method : Push(value : Int) ~ Nil {
			@stack[@sp] := value;
			@sp += 1;
		}

		method : Next() ~ Nil {
			if(@index < @input->Size()) {
				@char := @input->Get(@index);
				@index += 1;
			}
			else {
				@char := '\0';
			};
		}

		method : public : Parse() ~ String {
			Next();
			Alternation();

			return "";	
		}	

		method : Alternation() ~ Nil {
			Sequence();

			if(@char = '|') {
				Next();
				Sequence();
				Push(Token->ALTERNATION->As(Int));
			};
		}

		method : Sequence() ~ Nil {
			while(@char->IsChar() & @char <> '\0') {
				Repetition();
				Push(Token->SEQUENCE->As(Int));
			};
		}
		
		method : Repetition() ~ Nil {
			Push(@char->As(Int));
			Next();
		}

		method : Dump() ~ Nil {
			i += 0;
			c := @stack[0];	 

			while(c <> 0) {
				select(c) {
					label Token->ZERO_MORE: {
						'*'->PrintLine();
					}

					label Token->ONE_MORE: {
						'+'->PrintLine();
					}

					label Token->SEQUENCE: {
						'.'->PrintLine();
					}

					label Token->ALTERNATION: {
						'|'->PrintLine();
					}
				
					other: {
						c->As(Char)->PrintLine();
					}
				};
				i += 1;
				c := @stack[i];	 
			};
		}

		function : Main(args : String[]) ~ Nil {
			p := Postfix->New("ab");
			p->Parse();
			p->Dump();
		}
	}
}

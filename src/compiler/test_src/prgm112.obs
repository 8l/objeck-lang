bundle Default {
	enum Token := -32 { 
		ZERO_MORE,
		ONE_MORE,
		SEQUENCE,
		ALTERNATION
	}

	class Postfix {
		@input : String;
		@index : Int;
		@char : Char;
		@input_stack : Int[];
		@input_index : Int;
		@error : String;

		New(input : String) {
			@input := input;
			@index := 0;
			@input_stack := Int->New[256];
			@input_index := 0;
		}

		method : Push(value : Int) ~ Nil {
			@input_stack[@input_index] := value;
			@input_index += 1;
		}

		method : Next() ~ Nil {
			if(@index < @input->Size()) {
				@char := @input->Get(@index);
				@index += 1;
			}
			else {
				@char := '\0';
			};
		}

		method : public : Parse() ~ String {
			Next();
			Alternation();

			if(@error <> Nil) {
				@error->PrintLine();
			};

			return "";	
		}	

		method : Alternation() ~ Nil {
			Sequence();

			if(@char = '|') {
				Next();
				Sequence();
				Push(Token->ALTERNATION->As(Int));
			};
		}

		method : Sequence() ~ Nil {
			while(@char >= 40 & @char <= 122) {
				if(Repetition()) {
					Push(Token->SEQUENCE->As(Int));
				};
			};
		}
		
		method : Repetition() ~ Bool {
			was_pushed := false;
	
			if(@char = '(') {
				Next();
				Alternation();
				if(@char <> ')') {
					@error := "expected ')'";
					return;
				};
				Next();
			}
			else if(@char <> ')') {
				Push(@char->As(Int));
				was_pushed := true;
			};
			Next();
			
			if(@char = '*' | @char = '+') {
				Push(@char->As(Int));
				was_pushed := true;
				Next();
			};
			
			return was_pushed;
		}
		
		method : Dump() ~ Nil {
			i += 0;
			c := @input_stack[0];	 

			while(c <> 0) {
				select(c) {
					label Token->ZERO_MORE: {
						'*'->PrintLine();
					}

					label Token->ONE_MORE: {
						'+'->PrintLine();
					}

					label Token->SEQUENCE: {
						'.'->PrintLine();
					}

					label Token->ALTERNATION: {
						'|'->PrintLine();
					}
				
					other: {
						v := c->As(Char);
						v->PrintLine();
					}
				};
				i += 1;
				c := @input_stack[i];	 
			};
		}

		function : Main(args : String[]) ~ Nil {
			p := Postfix->New("(ba)*");
			p->Parse();
			p->Dump();
		}
	}
}

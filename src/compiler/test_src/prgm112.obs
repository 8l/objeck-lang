bundle Default {
	enum Token := -32 { 
		ADD,
		MUL,
		SUB,
		DIV
	}

	class Postfix {
		@input : String;
		@index : Int;
		@char : Char;
		@stack : Int[];
		@sp : Int;

		New(input : String) {
			@input := input;
			@index := 0;
			@stack := Int->New[256];
			@sp := 0;
		}

		method : Push(value : Int) ~ Nil {
			@stack[@sp] := value;
			@sp += 1;
		}

		method : Next() ~ Char {
			if(@index < @input->Size()) {
				@char := @input->Get(@index);
				@index += 1;
			};

			return '\0';
		}

		method : public : Parse() ~ String {
			Next();
			Term();

			return "";	
		}	

		method : Term() ~ Nil {
			Factor();

			if(@char = '+') {
				Next();
				Factor();
				Push(Token->ADD->As(Int));
			}
			else if(@char = '-') {
				Next();
				Factor();
				Push(Token->SUB->As(Int));
			};
		}

		method : Factor() ~ Nil {
			if(@char->IsDigit()) {
				Push((@char->As(Char))->As(Int));	
				Next();
			}
			else if(@char = '(') {
				Next();
				Term();
				if(@char <> ')') {			
					"expected )"->PrintLine();
					return;
				};		
				Next();
			}
			else {
				"expected digit"->PrintLine();
				return;
			};		

			if(@char = '*') {
				Next();
				Factor();
				Push(Token->MUL->As(Int));
			}
			else if(@char = '/') {
				Next();
				Factor();
				Push(Token->DIV->As(Int));
			};
		}

		method : Dump() ~ Nil {
			i += 0;
			c := @stack[0];	 

			while(c <> 0) {
				select(c) {
					label Token->ADD: {
						'+'->PrintLine();
					}

					label Token->MUL: {
						'*'->PrintLine();
					}

					label Token->SUB: {
						'-'->PrintLine();
					}

					label Token->DIV: {
						'/'->PrintLine();
					}
				
					other: {
						(c - 48)->PrintLine();
					}
				};
				i += 1;
				c := @stack[i];	 
			};
		}

		function : Main(args : String[]) ~ Nil {
			p := Postfix->New("4/(2+3)*5");
			p->Parse();
			p->Dump();
		}
	}
}

#~
This is a funkin 1
test class
class Test {
}
~#

enum Bar { y, z}

#~
doc me
~#
enum Foo {
	a, b,
C, D}

#~
This is a funkin 2
test class
~#
class Test from Bar {
	#~
	This is new
	~#
	New() {

	}

	#~  nested enum
	~#
	enum Nest {
		AA, BB, CC }

	#~
	Main function more text
	yes more more test
	@param a main argument
	@return nada
	~#
	function : public : 
			Main(a : String[]) ~ Nil {
		s := "123456";
		s->Delete(1,2);
		s->Append('z');
		s->PrintLine();

		f := "cat";	
		g := "foo";	
		
		f->Insert(3, g);
		f->Append('r');
		f->PrintLine();
	} 

	#~
	Hi ya 2...
	@param f f of a function
	@param g g of a function
	@return nothing again
	~#
	method : A(f : (Int) ~ Int, g : Float, h : Int) ~ Nil {
	}


	#~
	yet another test
	@param index offset index
	@return some string
	~#
	method : A(index : Float) ~ String {
	}

	method : A(f : (Int) ~ Int, g : ((Int) ~ Int) ~ Int) ~ Nil {
	}
}


	#~
   Compare interface
  ~#
  interface Compare {
    #~
     Compares two objects.
		@param rhs object to comapre to
     @return 1 if greater, -1 if less, otherwise 0
    ~#
    method : virtual : public : Compare(rhs : System.Compare) ~ Int;
	}

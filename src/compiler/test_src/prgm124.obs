use Struct;

bundle Default {
	enum ExpressionType := -100 {
		CHAR_MATCH,
		ANY_MATCH,
		OR_MATCH,
		ZERO_MORE,
		ONE_MORE
	}
	
	class Expression {
		@type : ExpressionType;
		@value : Char;
		@left : Expression;
		@right : Expression;

		New(value : Char) {
			@type := ExpressionType->CHAR_MATCH;
			@value := value;
		}

		New(type : ExpressionType, left : Expression) {
			@type := type;
			@left := left;
		}

		New(left : Expression, right : Expression) {
			@type := ExpressionType->OR_MATCH;
			@left := left;
			@right := right;
		}
	}
	
	class RegExParser {
		@tokens : Char[];
		@token : Char;
		@token_pos : Int;
		@expressions : Stack;
		@error : String;
		
		New(input : String) {
			@tokens := input->ToCharArray();
			@expressions := Stack->New();
			
			NextToken();
			Parse();
		}

		method : private : NextToken() ~ Nil {
			if(@token_pos < @tokens->Size()) {
				@token := @tokens[@token_pos];
				@token_pos += 1;
			}
			else {
				@token := '\0';
			};
		}

		method : private : Parse() ~ Nil {
			while(@token <> '\0') {			
				Binary();
				if(@error <> Nil) {
					return;
				};
			};
		}		
		
		method : private : Binary() ~ Nil {
			Unary();
			if(@error <> Nil) {
				return;
			};

			if(@token = '|') {
				NextToken();
				Binary();
				if(@error <> Nil) {
					return;
				};

				left := @expressions->Pop()->As(Expression);
				right := @expressions->Pop()->As(Expression);
				@expressions->Push(Expression->New(left, right));
IO.Console->PrintLine("match: or_match");
			};
		}

		method : private : Unary() ~ Nil {
			Value();
			if(@error <> Nil) {
				return;
			};

			if(@token = '*') {
				if(@expressions->Size() > 0) {
					expression := @expressions->Pop()->As(Expression);
					@expressions->Push(Expression->New(ExpressionType->ZERO_MORE, expression));
IO.Console->PrintLine("match: zero_or_more");
					NextToken();
				}
				else {
					@error := "missing left-hand side operand";
					return;
				};
			}
			else if(@token = '+') {
				if(@expressions->Size() > 0) {
					expression := @expressions->Pop()->As(Expression);
					@expressions->Push(Expression->New(ExpressionType->ONE_MORE, expression));
IO.Console->PrintLine("match: one_or_more");
					NextToken();
				}
				else {
					@error := "missing left-hand side operand";
					return;
				};
			};
		}

		method : private : Value() ~ Nil {
			if(@token->IsChar() | @token->IsDigit()) {
				@expressions->Push(Expression->New(@token));
IO.Console->Print("match: char=")->PrintLine(@token);
				NextToken();
			}
			else if(@token = '(') {
IO.Console->PrintLine("parentheses");
				NextToken();
				Binary();
				if(@token <> ')') {
					@error := "expected ')'";
					return;
				};
				NextToken();
			}
			else {
				@error := "invalid value";
				return;
			};
		}
	}
	
	class Test {
		function : Main(args : String[]) ~ Nil {
			if(args->Size() = 1) {
				regex := RegExParser->New(args[0]);
			};
		}
	}


}

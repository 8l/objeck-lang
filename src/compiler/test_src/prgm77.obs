use IO;
use Structure;

bundle Default {
	class Test {
		function : Main(args : String[]) ~ Nil {
			if(args->Size() = 1) {
				parser := XmlParser->New(args[0]);
				if(parser->Parse()) {
					root := parser->GetRoot();
					root->GetName()->PrintLine();
					results := parser->FindElements("/root/person/name");
					results->Size()->PrintLine();
				};
			};
		}
	}
	
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	# XML Parser class
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# 
	class XmlParser {
		@buffer : Byte[];
		@buffer_pos : Int;
		@error_msg : String;
		@root : Element;
		
		New(file : String) {
			# read in file
			len := File->Size(file);
			@buffer := Byte->New[len];
			in := FileReader->New(file);
			if(in->IsOpen()) {
				in->ReadBuffer(0, len, @buffer);
				in->Close();
			} 
			else {
				@error_msg := "Unable to open file: ";
				@error_msg->Append(file);
			};
			@buffer_pos := 0;
		}
		
		New(buffer : Byte[]) {
			@buffer := buffer;
			@buffer_pos := 0;
		}
		
		#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		# parses element tags
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# 
		method : public : Parse() ~ Bool {
			if(@error_msg <> Nil) {
				return false;
			};
		
			stack := Stack->New();
			@root := ParseElement();
			tag := @root;
				
			while(tag <> Nil) {
				# update element stack
				if(tag->GetType() = ElementType->OPENING) {
					parent : Element;
					if(stack->IsEmpty() = false) {
						parent := stack->Top()->As(Element);
						parent->AddChild(tag);
					};
					stack->Push(tag->As(Base));
				}
				else if(tag->GetType() = ElementType->CLOSING) {
					top : Element := stack->Top()->As(Element);
					if(top->GetType() = ElementType->OPENING) {
						stack->Pop();
					}
					else {
						@error_msg := "Mismatch tag types";
					};
					
					if(top->GetName()->Equals(tag->GetName()) <> true) {
						@error_msg := "Mismatch tag names";
					};
				};
				
				if(@error_msg <> Nil) {
					return false;
				};
				
				# update
				tag := ParseElement();
			};
			
			
if(@error_msg <> Nil) {
	Console->GetInstance()->Print("\nerror: ")->Print(@error_msg)->PrintLine();
};
			
			return true;
		}
		
		#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		# ignores whitespace
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# 
		method : native : IgnoreWhiteSpace() ~ Nil {
			# ignore whitespace
			while(@buffer_pos < @buffer->Size() & WhiteSpace(@buffer[@buffer_pos])) {
				@buffer_pos += 1;
			};
		}
		
		#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		# parse attribute name
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# 
		method : native : ParseName() ~ String {
			# check name start
			if(@buffer_pos < @buffer->Size() & (@buffer[@buffer_pos]->As(Char)->IsChar() |
				@buffer[@buffer_pos] = ':' | @buffer[@buffer_pos] = '_')) {
				# look for name end
				start_pos := @buffer_pos;
				while(@buffer_pos < @buffer->Size() &	(@buffer[@buffer_pos]->As(Char)->IsChar() |
					@buffer[@buffer_pos] = '-' | @buffer[@buffer_pos] = '.')) {
					@buffer_pos += 1;
				};
				# copy buffer
				name := String->New();
				for(i := start_pos; i < @buffer_pos; i += 1;) {
					name->Append(@buffer[i]);
				};
				
				return name;
			};
			
			return Nil;
		}
		
		#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		# parse attribute value
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# 
		method : native : ParseValue() ~ String {
			# check name start
			if(@buffer_pos < @buffer->Size() & @buffer[@buffer_pos] = '"') {
				# look for name end
				@buffer_pos += 1;
				start_pos := @buffer_pos;
				while(@buffer_pos < @buffer->Size() &	@buffer[@buffer_pos] <> '"') {
					@buffer_pos += 1;
				};
				
				if(@buffer_pos < @buffer->Size() &	@buffer[@buffer_pos] = '"') {
					# copy buffer
					name := String->New();
					for(i := start_pos; i < @buffer_pos; i += 1;) {
						c : Byte := @buffer[i];
						select(c) {
							label ' ': {
								name->Append("&#x20;");
							}
							
							label '\t': {
								name->Append("&#x9;");
							}
							
							label '\n': {
								name->Append("&#xA;");
							}
							
							label '\r': {
								name->Append("&#xD;");
							}
							
							other: {
								name->Append(@buffer[i]);
							}
						};
					};
					@buffer_pos += 1;
					
					return name;
				};
				
				return Nil;
			}
			else if(@buffer_pos < @buffer->Size() & @buffer[@buffer_pos] = '\'') {
				# look for name end
				@buffer_pos += 1;
				start_pos := @buffer_pos;
				while(@buffer_pos < @buffer->Size() &	@buffer[@buffer_pos] <> '\'') {
					@buffer_pos += 1;
				};
				
				if(@buffer_pos < @buffer->Size() &	@buffer[@buffer_pos] = '\'') {
					# copy buffer
					name := String->New();
					for(i := start_pos; i < @buffer_pos; i += 1;) {
						c : Byte := @buffer[i];
						select(c) {
							label ' ': {
								name->Append("&#x20;");
							}
							
							label '\t': {
								name->Append("&#x9;");
							}
							
							label '\n': {
								name->Append("&#xA;");
							}
							
							label '\r': {
								name->Append("&#xD;");
							}
							
							other: {
								name->Append(@buffer[i]);
							}
						};
					};
					@buffer_pos += 1;
					
					return name;
				};
				
				return Nil;
			};
			
			return Nil;
		}
		
		#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		# define whitespce
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# 
		method : native : WhiteSpace(c : Byte) ~ Bool {
			if(c = ' ' | c = '\t' | c = '\r' | c = '\n') {
				return true;
			};
			
			return false;
		}
		
		#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		# parse element
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# 
		method : public : native : ParseElement() ~ Element {
			# are we done?
			IgnoreWhiteSpace();
			if(@buffer_pos = @buffer->Size()) {
				return Nil;
			};
			
			# looks for '<'
			if(@buffer_pos < @buffer->Size() & @buffer[@buffer_pos] <> '<') {
				@error_msg := "Expected '<'...";
				return Nil;
			};
			@buffer_pos += 1;
			
			# looks for '</'
			IgnoreWhiteSpace();
			is_end_tag := false;
			if(@buffer_pos < @buffer->Size() & @buffer[@buffer_pos] = '/') {
				is_end_tag := true;
				@buffer_pos += 1;
			};
			
			# looks for tag name
			IgnoreWhiteSpace();
			tag_name := ParseName();
			if(tag_name = Nil) {
				@error_msg := "Invalid tag name...";
				return Nil;
      };
      
      # look for attributes
      IgnoreWhiteSpace();
      attrib_key := ParseName();
      if(attrib_key <> Nil & is_end_tag) {
      	@error_msg := "End tags may not have attributes...";
				return Nil;
      };
      
      while(attrib_key <> Nil) {
# Console->GetInstance()->Print("key: ")->PrintLine(attrib_key);    
      
      	IgnoreWhiteSpace();
      	if(@buffer_pos < @buffer->Size() & @buffer_pos < @buffer->Size() & 
					@buffer[@buffer_pos] <> '=') {
					@error_msg := "Expected '='...";
					return Nil;
				};
				@buffer_pos += 1;
				
				# looks for tag value
				IgnoreWhiteSpace();
				attrib_value := ParseValue();
				if(attrib_value = Nil) {
					@error_msg := "Invalid tag name...";
					return Nil;
				};
Console->GetInstance()->Print("value: ")->PrintLine(attrib_value);    

				
				# update
				IgnoreWhiteSpace();
      	attrib_key := ParseName();
      };
      
			# unary
			is_unary_tag := false;
			if(@buffer_pos < @buffer->Size() & @buffer[@buffer_pos] = '/') {
				is_unary_tag := true;
				@buffer_pos += 1;
			};
			if(is_unary_tag & is_end_tag) {
				@error_msg := "Tag cannot be an end and unary tag...";
				return Nil;
			};
			
			IgnoreWhiteSpace();
			if(@buffer_pos < @buffer->Size() & @buffer[@buffer_pos] = '>') {
				@buffer_pos += 1;
			}
			else {
				@error_msg := "Expected closing tag...";
				return Nil;
			};
			
			# copy tag contents
			start_pos := @buffer_pos;
			while(@buffer_pos < @buffer->Size() & @buffer[@buffer_pos] <> '<') {
				@buffer_pos += 1;
			};
			
			tag_contents : String := Nil;
			if(@buffer_pos > start_pos) {
				tag_contents := String->New();
				for(i := start_pos; i < @buffer_pos; i += 1;) {
					tag_contents->Append(@buffer[i]);
				};
			};				
			
#~			
			if(tag_contents <> Nil) {
				Console->GetInstance()->Print("contents: ")->Print(tag_contents)->PrintLine();
			};
~#

			type : ElementType;
			if(is_unary_tag) {
				type := ElementType->UNARY;
			}
			else if(is_end_tag) {
				type := ElementType->CLOSING;
			}
			else {
				type := ElementType->OPENING;
			};
			
			return Element->New(tag_name, type, tag_contents);
		}
		
		method : public : GetRoot() ~ Element {
			return @root;
		}
		
		method : public : FindElements(path : String) ~ Vector {
			filters := Vector->New();
			start := 0;
			each(i : path) {
					if(path->Get(i) = '/') {
						if(i - start > 0) {
							filter := path->SubString(start, i - start);
							filters->AddBack(filter->As(Base));
						};
						start := i + 1;
					};
			};
			
			if(start < path->Size() & path->Size() - start > 0) {
				filter := path->SubString(start, path->Size() - start);
				filters->AddBack(filter->As(Base));
			};
			
			children := Vector->New();
			if(filters->Size() > 0 & filters->Get(0)->As(String)->Equals(@root->GetName())) {
				if(filters->Size() = 1) {
					children->AddBack(@root->As(Base));
				}
				else {
					# process root
					filter := filters->Get(1)->As(String);
					children := @root->GetChildren(filter);
					
					# process children
					for(i := 2; i < filters->Size(); i += 1;) {
						# get filter
						filter := filters->Get(i)->As(String);
						# filter children
						all_filtered := Vector->New();
						each(j : children) {
							element : Element := children->Get(j)->As(Element);
							filtered := element->GetChildren(filter);	
							all_filtered->AddBack(filtered);
						};
						children := all_filtered;
					};
				};				
				
			};

# Console->GetInstance()->Print("found: ")->PrintLine(children->Size());			
			return children;
		}
	}
	
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	# Element types
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# 
	enum ElementType {
		DCLR,
		DOCTYPE,
		OPENING,
		CLOSING,
		UNARY,
		COMMENT
	}
	
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	# Element class
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# 
	class Element {
		@name : String;
		@type : ElementType;
		@contents : String;
		@children : Vector;
		@attribs : StringHash;
		
		New(name : String, type : ElementType, contents : String) {
			@name := name;
			@type := type;
			@contents := contents;
			@children := Vector->New();
		}
		
		method : public : GetName() ~ String {
			return @name;
		}
		
		method : public : GetType() ~ ElementType {
			return @type;
		}
		
		method : public : GetContents() ~ String {
			return @contents;
		}
		
		method : public : AddChild(tag : Element) ~ Nil {
			@children->AddBack(tag->As(Base));
		}
		
		method : public : GetChildCount() ~ Int {
			return @children->Size();
		}
		
		method : public : GetChild(i : Int) ~ Element {
			if(i < @children->Size()) {
				return @children->Get(i)->As(Element);
			};
			
			return Nil;
		}
		
		#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		# get all children that 
		# match the given name
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# 
		method : public : native : GetChildren(name : String) ~ Vector {
			filtered := Vector->New();
			each(i : @children) {
				element : Element := @children->Get(i);
				if(element->GetName()->Equals(name)) {
					filtered->AddBack(element->As(Base));
				};
			};
			
			return filtered;
		}
		
		#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		# get all children
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# 
		method : public : GetChildren() ~ Vector {
			return @children;
		}
		
		method : public : AddAttribute(key : String, value : String) ~ Nil {
			if(@attribs = Nil) {
				@attribs := StringHash->New();
			};
			@attribs->Insert(key, value->As(Base));
		}
		
		method : public : GetAttribute(key : String) ~ String {
			return @attribs->Find(key)->As(String);
		}
	}
}


use Structure;

bundle Default {
	enum Signal := -100 {
		Destroy
	}

	class CallbackHolder {
		@callback : (GtkWidget) ~ Nil;

		New(callback : (GtkWidget) ~ Nil) {
			@callback := callback;
		}

		method : public : Get() ~ (GtkWidget) ~ Nil {
			return @callback;
		}
	}

	class GtkWidget {
		@native_ptr : Int;
		@lib_proxy : static : DllProxy;

		New() {
		}

		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("lib/linux64/gtk2_objk.so.1.0.1");
			};

			return @lib_proxy;
		}

		method : public : SignalConnect(signal : Signal, callback : (GtkWidget) ~ Nil) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[3];
			array_args[0] := @self;
			array_args[1] := IntHolder->New(signal->As(Int));
			array_args[2] := CallbackHolder->New(callback);
			lib_proxy->CallFunction("og_signal_connect", array_args);
		}

		method : public : Show() ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := IntHolder->New(@native_ptr);
			lib_proxy->CallFunction("og_widget_show", array_args);
		}
	}

	class GtkContainer from GtkWidget {
		New() {
			Parent();
		}

		method : public : SetBorderWidth(width : Int) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(@native_ptr);
			array_args[1] := IntHolder->New(width);
			lib_proxy->CallFunction("og_container_width", array_args);
		}
		
		method : public : ContainerAdd(widget : GtkWidget) ~ Nil {
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(@native_ptr);
			array_args[1] := widget;
			lib_proxy->CallFunction("og_container_add", array_args);
		}
	}

	class GtkButton from GtkContainer {
		New(name : String) {
			Parent();
			lib_proxy := GetDllProxy();
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(0);
			array_args[1] := name;
			lib_proxy->CallFunction("og_button_new_with_label", array_args);
			ptr_holder := array_args[0]->As(IntHolder);
			@native_ptr := ptr_holder->Get();
		}
	}	

	class GtkWindow from GtkContainer {
		New() {
			Parent();
			lib_proxy := GetDllProxy();
			array_args := Base->New[1];
			array_args[0] := IntHolder->New(0);
			lib_proxy->CallFunction("og_window_new", array_args);
			ptr_holder := array_args[0]->As(IntHolder);
			@native_ptr := ptr_holder->Get();
		}
		
		method : public : Main() ~ Nil {
			lib_proxy := GetDllProxy();
         lib_proxy->CallFunction("og_main", Nil->As(Base[]));
		}
	}

	class Gtk2 {
		function : DeleteEvent(widget : GtkWidget) ~ Nil {
			(7+9)->PrintLine();
			9999->PrintLine();
		}

		function : Main(args : String[]) ~ Nil {
			window := GtkWindow->New();	
			button := GtkButton->New("Hello");
			
			window->ContainerAdd(button->As(GtkWidget));
			callback := DeleteEvent(GtkWidget) ~ Nil;
			window->SignalConnect(Signal->Destroy, callback);
			window->SetBorderWidth(400);
					
			button->Show();			
			window->Show();
			window->Main();
		}
	}
}

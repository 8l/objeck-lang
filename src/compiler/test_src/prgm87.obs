use Structure;

bundle Default {
	enum Signal {
		Destroy
	}

	class GtkWidget {
		New() {
		}
	}

	class GdkEvent {
		New() {
		}
	}

	class GtkWindow {
		native_ptr : Int;

		New() {
			lib_proxy := DllProxy->New("lib/linux64/gtk2_objk.so.1.0.1");
         array_args := Base->New[1];
         array_args[0] := IntHolder->New(0);
         lib_proxy->CallFunction("g_window_new", array_args);
			ptr_holder := array_args[0]->As(IntHolder);
			native_ptr := ptr_holder->Get();
		}
		
		method : public : SignalConnect(signal : Signal, callback : (GtkWidget, GdkEvent) ~ Bool) ~ Nil {
		}

		method : public : Show() ~ Nil {
			lib_proxy := DllProxy->New("lib/linux64/gtk2_objk.so.1.0.1");
         array_args := Base->New[1];
         array_args[0] := IntHolder->New(native_ptr);
         lib_proxy->CallFunction("g_widget_show", array_args);
		}

		method : public : Main() ~ Nil {
			lib_proxy := DllProxy->New("lib/linux64/gtk2_objk.so.1.0.1");
         lib_proxy->CallFunction("g_main", Nil->As(Base[]));
		}
	}

	class Gtk2 {
		function : DeleteEvent(widget : GtkWidget, event : GdkEvent) ~ Bool {
			return true;
		}

		function : Main(args : String[]) ~ Nil {
			window := GtkWindow->New();	
			f := DeleteEvent(GtkWidget, GdkEvent) ~ Bool;
			window->SignalConnect(Signal->Destroy, f);
			window->Show();
			window->Main();
		}
	}
}

use Structure;

bundle Default {
	enum Signal := -100 {
		Destroy
	}

	class CallbackHolder {
		@callback : (GtkWidget) ~ Nil;

		New(callback : (GtkWidget) ~ Nil) {
			@callback := callback;
		}

		method : public : Get() ~ (GtkWidget) ~ Nil {
			return @callback;
		}
	}
	class GtkWidget {
		@native_ptr : Int;
		@lib_proxy : static : DllProxy;

		New() {
		}

		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("lib/linux64/gtk2_objk.so.1.0.1");
			};

			return @lib_proxy;
		}

		method : public : SignalConnect(signal : Signal, callback : (GtkWidget) ~ Nil) ~ Nil {
			lib_proxy := GetDllProxy();
         array_args := Base->New[3];
         array_args[0] := @self;
			array_args[1] := IntHolder->New(signal->As(Int));
         array_args[2] := CallbackHolder->New(callback);
         lib_proxy->CallFunction("signal_connect", array_args);
		}

		method : public : Show() ~ Nil {
			lib_proxy := GetDllProxy();
         array_args := Base->New[1];
         array_args[0] := IntHolder->New(@native_ptr);
         lib_proxy->CallFunction("g_widget_show", array_args);
		}
	}

	class GtkWindow from GtkWidget {
		New() {
			Parent();

			lib_proxy := GetDllProxy();
         array_args := Base->New[1];
         array_args[0] := IntHolder->New(0);
         lib_proxy->CallFunction("g_window_new", array_args);
			ptr_holder := array_args[0]->As(IntHolder);
			@native_ptr := ptr_holder->Get();
		}
		
		method : public : Main() ~ Nil {
			lib_proxy := GetDllProxy();
         lib_proxy->CallFunction("g_main", Nil->As(Base[]));
		}
	}

	class Gtk2 {
		function : DeleteEvent(widget : GtkWidget) ~ Nil {
			(7+9)->PrintLine();
			9999->PrintLine();
		}

		function : Main(args : String[]) ~ Nil {
			window := GtkWindow->New();	
			callback := DeleteEvent(GtkWidget) ~ Nil;
			window->SignalConnect(Signal->Destroy, callback);
			window->Show();
			window->Main();
		}
	}
}

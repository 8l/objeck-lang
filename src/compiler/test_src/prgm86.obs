bundle Default {
	class Dog implements Inf {
		New() {
		}

		function : G() ~ Nil {
			"Hello"->PrintLine();
		}

		method : public  : B1(s : String, b : Float) ~ Nil {
			"Foo Bar!"->PrintLine();
		}
	}

	class Bar from Compare implements Inf, Inf2 {
		New() {
			Parent();
		}

		function : native : Main(args : System.String[]) ~ Nil {
			x := Bar->New();
			y : Inf := x->Foo();
			w : Dog := y->As(Dog);
			w->G();
#~
			r := x->TypeOf(Bar);
			r->PrintLine();
			r := x->TypeOf(Inf);
			r->PrintLine();

			d := Dog->New();
			r := d->TypeOf(Inf2);
			r->PrintLine();
			r := d->TypeOf(Inf);
			r->PrintLine();
~#


#			y->GetClass()->GetName();
#			y->B1("xxx", 3.41);
		}

		function : Run(x : Bar) ~ Nil {
			Blah(x->As(Inf));
		}

		function : native : Blah(x : Inf) ~ Nil {
			x->As(Bar)->B1("yy", 3.4);
		}

		function : Blah2(x : Bar) ~ Nil {
			x->B1("x", 1.31);
			x->HashID()->PrintLine();
		}

		method : public : Foo() ~ Inf {
			return Dog->New()->As(Inf);
		}

		method : public : Compare(rhs : System.Compare) ~ Int {
			return -1;
		}

      method : public : HashID() ~ Int
		{
			return -1;
		}

		method : public :  B1(s : String, b : Float) ~ Nil {
			"called"->PrintLine();
		}

		method : public : B2(a : Int, b : Float) ~ Nil {
			"also again"->PrintLine();
		}

#~
		method : Blsh(a : Int, b : Float) ~ Nil {
			y := a * b;
		}
~#
	}
}

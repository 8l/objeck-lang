use Net;
use IO;
use Structure;

bundle Default {
	class HttpClient {
		@headers : BinaryTree;
		@content : Vector;
		@url : String;
		
		function : Main(args : System.String[]), Nil {
			client := HttpClient->New(args[0]);
			lines : Vector := client->GetContent();
			
			for(i := 0; i < lines->GetSize(); i := i + 1;) {
				lines->GetValue(i)->As(String)->PrintLine();
			};
		}
		
		New(url : String) {
			@url := url;
			@headers := BinaryTree->New();
			@content := Vector->New();
		}
		
		method : native : GetHeaders(), BinaryTree {
			return @headers;
		}
		
		method : public : native : GetContent(), Vector {
			if(@content->GetSize() = 0) {
				Get();
			};
			
			return @content;
		}
		
		method : native : Get(), Nil {
			if(@url->StartsWith("http://")) {
				@url := @url->SubString("http://"->GetSize(), 
					@url->GetSize() - "http://"->GetSize());
				index := @url->GetIndex('/');
				address := "";
				location := "/";
				if(index > -1) {
					address := @url->SubString(index);
					index->PrintLine();
					location := @url->SubString(index + 1, @url->GetSize() - index - 1);
				}
				else {
					address := @url;
				};
				
				socket := TCPSocket->New(address, 80);
				if(socket->IsOpen()) {
					get := "GET ";
					get->Append(location);
					get->Append(" HTTP/1.1\r\nHost: ");
					get->Append(address);
					get->Append("\r\n\r\n");
					socket->WriteString(get);
	
					status_line := socket->ReadString();
					if(status_line->StartsWith("HTTP/1.1")) {
						status_line := status_line->SubString("HTTP/1.1"->GetSize() + 1, 
							status_line->GetSize() - "HTTP/1.1"->GetSize() - 1);
						index := status_line->GetIndex(' ');
						return_code := status_line->SubString(index);
						return_code->PrintLine();
					};
					
					
					do {
						line := socket->ReadString();
						if(line->GetSize() > 0 & line->StartsWith('<') = false) {
							index := line->GetIndex(':');
							name := line->SubString(index);
							value := line->SubString(index + 1, line->GetSize() - index - 1);			
							@headers->Insert(name->As(Compare), value->As(Base));
						};
					}
					while(line->StartsWith('<') = false);
					
					do {
						line := socket->ReadString();
						if(line->GetSize() > 0) {
							line := line->Trim();
							@content->AddBack(line->As(Base));	
						};
					}
					while(line->GetSize() > 0);
					socket->Close();
				}
				else {
					error := "unable to connect to: ";
					error->Append(address);
					error->PrintLine();
				};
			};			
		}
	}
}

# simple language parser in the Objeck language

use IO;
use Structure;

bundle Default {  
  class Hello {
    New() {
    }

    function : Main(args : System.String[]), Nil {
      Run();
    }
    function : native : Run(), Nil {
      reserved : BinaryTree := BinaryTree->New();
      reserved->Insert("function"->As(System.Compare), "keyword: function"->As(System.Base));
      reserved->Insert("Int"->As(System.Compare), "keyword: Int"->As(System.Base));

      reader := FileReader->New("../compiler/test_src/prgm1.obs");
      line_num := 0;
      while(reader->IsEOF() <> true) {
        line := reader->ReadString();
        line_num := line_num + 1;
                  
        i := 0;  
        while(i < line->GetSize()) {    
          # skip whitespace
          while((line->GetChar(i) = ' ' | line->GetChar(i) = '\t') & i < line->GetSize()) {
            i := i + 1;
          };
          
          # word
          if(line->GetChar(i)->IsChar() = true) {
            string := "";
            while(line->GetChar(i)->IsChar() = true | line->GetChar(i) = '.') {
              string->Append(line->GetChar(i));
              i := i + 1;
            };

            result : System.String := reserved->Find(string->As(System.Compare));
            if(result <> Nil) {
              Console->GetInstance()->PrintLine(result);
            }
            else {
              Console->GetInstance()->Print("string '")->Print(string)->PrintLine("'");
            };
          }
          # number
          else if(line->GetChar(i)->IsDigit() = true) {
            number := "";
            is_dec : Bool := false;
            while(line->GetChar(i)->IsDigit() = true | line->GetChar(i) = '.') {
              if(line->GetChar(i) = '.') {
                is_dec := true;
              };
              
              number->Append(line->GetChar(i));
              i := i + 1;
            };

            if(is_dec) {
              Console->GetInstance()->Print("decimal '")->Print(number)->PrintLine("'");
            }
            else {
              Console->GetInstance()->Print("integer '")->Print(number)->PrintLine("'");
            };
          }
          # other
          else {
            select(line->GetChar(i)) {
              label '(': {
                "opren"->PrintLine();
              }
              
              label ')': {
                "cpren"->PrintLine();
              }

              label '[': {
                "obrace"->PrintLine();
              }
              
              label ']': {
                "cbrace"->PrintLine();
              }      

              
              label '{': {
                "ocbrace"->PrintLine();
              }
        
              label '}': {
                "ccbrace"->PrintLine();
              }
              
              label '#': {
                "pound"->PrintLine();
              }

              label '/': {
                "div"->PrintLine();
              }

              label '*': {
                "mul"->PrintLine();
              }

              label '+': {
                "add"->PrintLine();
              }

              label '-': {
                "sub"->PrintLine();
              }

              label '%': {
                "mod"->PrintLine();
              }
              other: {
                Console->GetInstance()->Print("'")->Print(line->GetChar(i))->PrintLine("'");
              }
            };
            i := i + 1;
          };
        };
      };
      reader->Close();
    }
  }
}

# R. Hollines
# AA binary balanced use tree

use System;
use Structure;

bundle Default {
	class Test {
		function : Main(args : System.String[]), Nil {
			Run();
			"Done!"->PrintLine();
		}
		
		function : native : Run(), Nil {
			tree : Map := Map->New();
			for(i : Int := 0; i < 1000; i := i + 1;) {
				v : IntHolder := IntHolder->New(i);
				s : System.String := System.String->New("Pug-");
				s->Append((i + 2)->ToString()->ToCharArray());
				tree->Insert(v->As(System.Compare), s->As(System.Base));
			};

			v : Vector := tree->GetKeys();
			for(i : Int := 0; i < v->GetSize(); i := i + 1;) {
				h : IntHolder := v->GetValue(i)->As(Structure.IntHolder);
				h->GetValue()->PrintLine();
			};

			v := tree->GetValues();
			for(i : Int := 0; i < v->GetSize(); i := i + 1;) {
				v->GetValue(i)->As(System.String)->PrintLine();
			};		
		}
	}
}

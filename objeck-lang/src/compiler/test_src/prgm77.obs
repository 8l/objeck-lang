use IO;
use Structure;

bundle Default {
	class Test {
		function : Main(args : String[]) ~ Nil {
			if(args->Size() = 1) {
				parser := XmlParser->New(args[0]);
				if(parser->Parse()) {
					root := parser->GetRoot();
					root->GetName()->PrintLine();
					root->GetChildCount()->PrintLine();
				};
			};
		}
	}
	
	# xml parser
	class XmlParser {
		@buffer : Byte[];
		@buffer_pos : Int;
		@error_msg : String;
		@root : Tag;
		
		New(file : String) {
			# read in file
			len := File->Size(file);
			@buffer := Byte->New[len];
			in := FileReader->New(file);
			if(in->IsOpen()) {
				in->ReadBuffer(0, len, @buffer);
				in->Close();
			} 
			else {
				@error_msg := "Unable to open file: ";
				@error_msg->Append(file);
			};
			@buffer_pos := 0;
		}
		
		New(buffer : Byte[]) {
			@buffer := buffer;
			@buffer_pos := 0;
		}
		
		# parse tags
		method : public : Parse() ~ Bool {
			if(@error_msg <> Nil) {
				return false;
			};
		
			stack := Stack->New();
			@root := ParseTag();
			tag := @root;
				
			while(tag <> Nil) {
				# update element stack
				if(tag->GetType() = TagType->OPENING) {
					parent : Tag;
					if(stack->IsEmpty() = false) {
						parent := stack->Top()->As(Tag);
						parent->AddChild(tag);
					};
					stack->Push(tag->As(Base));
				}
				else if(tag->GetType() = TagType->CLOSING) {
					top : Tag := stack->Top()->As(Tag);
					if(top->GetType() = TagType->OPENING) {
						stack->Pop();
					}
					else {
						@error_msg := "Mismatch tag types";
					};
					
					if(top->GetName()->Equals(tag->GetName()) <> true) {
						@error_msg := "Mismatch tag names";
					};
				};
				
				if(@error_msg <> Nil) {
					return false;
				};
				
				# update
				tag := ParseTag();
			};
			
			if(@error_msg = Nil) {
				"\nsuccess!"->PrintLine();
			}
			else {
				Console->GetInstance()->Print("\nerror: ")->Print(@error_msg)->PrintLine();
			};
			
			return true;
		}
		
		method : native : IgnoreWhiteSpace() ~ Nil {
			# ignore whitespace
			while(@buffer_pos < @buffer->Size() & WhiteSpace(@buffer[@buffer_pos])) {
				@buffer_pos += 1;
			};
		}
		
		method : native : WhiteSpace(c : Byte) ~ Bool {
			if(c = ' ' | c = '\t' | c = '\r' | c = '\n') {
				return true;
			};
			
			return false;
		}
		
		method : public : native : ParseTag() ~ Tag {
			IgnoreWhiteSpace();
			while(@buffer_pos >= @buffer->Size()) {
				return Nil;
			};
			
			if(@buffer_pos < @buffer->Size() & @buffer_pos < @buffer->Size() & 
				@buffer[@buffer_pos] <> '<') {
				@error_msg := "Expected opening tag...";
				return Nil;
			};
			@buffer_pos += 1;
			
			IgnoreWhiteSpace();
			is_end_tag := false;
			if(@buffer_pos < @buffer->Size() & @buffer[@buffer_pos] = '/') {
				is_end_tag := true;
				@buffer_pos += 1;
			};
			
			IgnoreWhiteSpace();
			start_pos := @buffer_pos;
			while(@buffer_pos < @buffer->Size() & @buffer[@buffer_pos] <> '/' & 
				@buffer[@buffer_pos] <> '>' & WhiteSpace(@buffer[@buffer_pos]) = false) {
				@buffer_pos += 1;
			};
			# copy tag name
			tag_name := String->New();
			for(i := start_pos; i < @buffer_pos; i += 1;) {
				tag_name->Append(@buffer[i]);
			};
			
			# unary
			IgnoreWhiteSpace();
			is_unary_tag := false;
			if(@buffer_pos < @buffer->Size() & @buffer[@buffer_pos] = '/') {
				is_unary_tag := true;
				@buffer_pos += 1;
			};
			
			if(is_unary_tag & is_end_tag) {
				@error_msg := "Invalid tag: end and unary tag...";
				return Nil;
			};
			
			if(@buffer_pos < @buffer->Size() & @buffer[@buffer_pos] = '>') {
				@buffer_pos += 1;
			}
			else {
			@buffer[@buffer_pos]->PrintLine();
				@error_msg := "Expected closing tag..";
				return Nil;
			};
			
			# copy tag conents
			IgnoreWhiteSpace();
			start_pos := @buffer_pos;
			while(@buffer_pos < @buffer->Size() & @buffer[@buffer_pos] <> '<') {
				@buffer_pos += 1;
			};
			tag_contents : String := Nil;
			if(@buffer_pos > start_pos) {
				tag_contents := String->New();
				for(i := start_pos; i < @buffer_pos; i += 1;) {
					tag_contents->Append(@buffer[i]);
				};
			};				
			
#~			
			if(tag_contents <> Nil) {
				Console->GetInstance()->Print("contents: ")->Print(tag_contents)->PrintLine();
			};
~#

			type : TagType;
			if(is_unary_tag) {
				type := TagType->UNARY;
			}
			else if(is_end_tag) {
				type := TagType->CLOSING;
			}
			else {
				type := TagType->OPENING;
			};
			
			return Tag->New(tag_name, type, tag_contents);
		}
		
		method : public : GetRoot() ~ Tag {
			return @root;
		}
		
		method : public : GetTag(path : String) ~ Tag {
			return Nil;
		}
	}
	
	# tag class
	class Tag {
		@name : String;
		@type : TagType;
		@contents : String;
		@children : Vector;
		@attribs : StringHash;
		
		New(name : String, type : TagType, contents : String) {
			@name := name;
			@type := type;
			@contents := contents;
			@children := Vector->New();
		}
		
		method : public : GetName() ~ String {
			return @name;
		}
		
		method : public : GetType() ~ TagType {
			return @type;
		}
		
		method : public : GetContents() ~ String {
			return @contents;
		}
		
		method : public : AddChild(tag : Tag) ~ Nil {
			@children->AddBack(tag->As(Base));
		}
		
		method : public : GetChildCount() ~ Int {
			return @children->Size();
		}
		
		method : public : AddAttribute(key : String, value : String) ~ Nil {
			if(@attribs = Nil) {
				@attribs := StringHash->New();
			};
			@attribs->Insert(key, value->As(Base));
		}
		
		method : public : GetAttribute(key : String) ~ String {
			return @attribs->Find(key)->As(String);
		}
		
		method : public : GetChild(i : Int) ~ Tag {
			if(i < @children->Size()) {
				return @children->Get(i)->As(Tag);
			};
			
			return Nil;
		}
	}
	
	# tag type
	enum TagType {
		OPENING,
		CLOSING,
		UNARY
	}
}

